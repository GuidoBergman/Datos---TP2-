{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import pandas as pd\n",
    "\n",
    "import seaborn as sns\n",
    "\n",
    "from pathlib import Path\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from lightgbm import LGBMClassifier\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "from sklearn.pipeline import make_pipeline\n",
    "\n",
    "from sklearn.model_selection import GridSearchCV, RandomizedSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#train_values = pd.read_csv(DATA_DIR / 'train_values.csv', index_col='building_id')\n",
    "#train_labels = pd.read_csv(DATA_DIR / 'train_labels.csv', index_col='building_id')\n",
    "\n",
    "df_train = pd.read_csv('train_values_short1.csv', index_col='building_id')\n",
    "df_train_labels = pd.read_csv('train_labels.csv', index_col='building_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "cwd = os.getcwd()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_values_subset = df_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "pipe = make_pipeline(StandardScaler(), \n",
    "                     LGBMClassifier(random_state=2021))  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.compose import ColumnTransformer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['boosting_type', 'class_weight', 'colsample_bytree', 'importance_type', 'learning_rate', 'max_depth', 'min_child_samples', 'min_child_weight', 'min_split_gain', 'n_estimators', 'n_jobs', 'num_leaves', 'objective', 'random_state', 'reg_alpha', 'reg_lambda', 'silent', 'subsample', 'subsample_for_bin', 'subsample_freq'])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LGBMClassifier().get_params().keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "param_grid = {\n",
    "    #'lgbmclassifier__learning_rate': [0.1], \n",
    "    #'lgbmclassifier__n_estimators': [30],\n",
    "    'lgbmclassifier__num_leaves': [10, 20, 30, 40, 50], \n",
    "    'lgbmclassifier__num_iterations': [10, 20, 30, 40, 50, 100], \n",
    "    #'lgbmclassifier__boosting_type': ['gbdt'], \n",
    "    #'lgbmclassifier__max_depth': [10, 30, 60],\n",
    "    'lgbmclassifier__objective': ['regression'], \n",
    "    #'lgbmclassifier__seed': [500],\n",
    "    #'lgbmclassifier__colsample_bytree': [0.65, 0.75, 0.8], \n",
    "    #'lgbmclassifier__subsample': [0.7, 0.75], \n",
    "    #'lgbmclassifier__reg_alpha': [1, 2, 6],\n",
    "    #'lgbmclassifier__reg_lambda': [1, 2, 6]\n",
    "             }\n",
    "\n",
    "gs = GridSearchCV(pipe, param_grid, cv=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-13-dbcb6cdfe3c2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mgs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_values_subset\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdf_train_labels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mravel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     61\u001b[0m             \u001b[0mextra_args\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mall_args\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mextra_args\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 63\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m             \u001b[0;31m# extra_args > 0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    839\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    840\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 841\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    842\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    843\u001b[0m             \u001b[0;31m# multimetric is determined here because in the case of a callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36m_run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1286\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1287\u001b[0m         \u001b[0;34m\"\"\"Search all candidates in param_grid\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1288\u001b[0;31m         \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mParameterGrid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1289\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1290\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mevaluate_candidates\u001b[0;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[1;32m    793\u001b[0m                               n_splits, n_candidates, n_candidates * n_splits))\n\u001b[1;32m    794\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 795\u001b[0;31m                 out = parallel(delayed(_fit_and_score)(clone(base_estimator),\n\u001b[0m\u001b[1;32m    796\u001b[0m                                                        \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    797\u001b[0m                                                        \u001b[0mtrain\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtest\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1042\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_original_iterator\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1043\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1044\u001b[0;31m             \u001b[0;32mwhile\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdispatch_one_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1045\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1046\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mdispatch_one_batch\u001b[0;34m(self, iterator)\u001b[0m\n\u001b[1;32m    857\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    858\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 859\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dispatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtasks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    860\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    861\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_dispatch\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    775\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    776\u001b[0m             \u001b[0mjob_idx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 777\u001b[0;31m             \u001b[0mjob\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    778\u001b[0m             \u001b[0;31m# A job can complete so quickly than its callback is\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    779\u001b[0m             \u001b[0;31m# called before we get here, causing self._jobs to\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mapply_async\u001b[0;34m(self, func, callback)\u001b[0m\n\u001b[1;32m    206\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    207\u001b[0m         \u001b[0;34m\"\"\"Schedule a func to be run\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 208\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImmediateResult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    209\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    210\u001b[0m             \u001b[0mcallback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    570\u001b[0m         \u001b[0;31m# Don't delay the application, to avoid keeping the input\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    571\u001b[0m         \u001b[0;31m# arguments in memory\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 572\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    573\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    574\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    260\u001b[0m         \u001b[0;31m# change the default number of processes to -1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    261\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 262\u001b[0;31m             return [func(*args, **kwargs)\n\u001b[0m\u001b[1;32m    263\u001b[0m                     for func, args, kwargs in self.items]\n\u001b[1;32m    264\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    260\u001b[0m         \u001b[0;31m# change the default number of processes to -1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    261\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 262\u001b[0;31m             return [func(*args, **kwargs)\n\u001b[0m\u001b[1;32m    263\u001b[0m                     for func, args, kwargs in self.items]\n\u001b[1;32m    264\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/sklearn/utils/fixes.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    220\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    221\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mconfig_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 222\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\u001b[0m in \u001b[0;36m_fit_and_score\u001b[0;34m(estimator, X, y, scorer, train, test, verbose, parameters, fit_params, return_train_score, return_parameters, return_n_test_samples, return_times, return_estimator, split_progress, candidate_progress, error_score)\u001b[0m\n\u001b[1;32m    591\u001b[0m             \u001b[0mestimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    592\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 593\u001b[0;31m             \u001b[0mestimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    594\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    595\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/sklearn/pipeline.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, **fit_params)\u001b[0m\n\u001b[1;32m    344\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_final_estimator\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m'passthrough'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    345\u001b[0m                 \u001b[0mfit_params_last_step\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfit_params_steps\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msteps\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 346\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_final_estimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mXt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params_last_step\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    347\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    348\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/lightgbm/sklearn.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, init_score, eval_set, eval_names, eval_sample_weight, eval_class_weight, eval_init_score, eval_metric, early_stopping_rounds, verbose, feature_name, categorical_feature, callbacks, init_model)\u001b[0m\n\u001b[1;32m    845\u001b[0m                     \u001b[0mvalid_sets\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mvalid_x\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_le\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalid_y\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    846\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 847\u001b[0;31m         super(LGBMClassifier, self).fit(X, _y, sample_weight=sample_weight,\n\u001b[0m\u001b[1;32m    848\u001b[0m                                         \u001b[0minit_score\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minit_score\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meval_set\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvalid_sets\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    849\u001b[0m                                         \u001b[0meval_names\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0meval_names\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/lightgbm/sklearn.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, init_score, group, eval_set, eval_names, eval_sample_weight, eval_class_weight, eval_init_score, eval_group, eval_metric, early_stopping_rounds, verbose, feature_name, categorical_feature, callbacks, init_model)\u001b[0m\n\u001b[1;32m    610\u001b[0m             \u001b[0minit_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minit_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbooster_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    611\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 612\u001b[0;31m         self._Booster = train(params, train_set,\n\u001b[0m\u001b[1;32m    613\u001b[0m                               \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_estimators\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalid_sets\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvalid_sets\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalid_names\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0meval_names\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    614\u001b[0m                               \u001b[0mearly_stopping_rounds\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mearly_stopping_rounds\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/lightgbm/engine.py\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(params, train_set, num_boost_round, valid_sets, valid_names, fobj, feval, init_model, feature_name, categorical_feature, early_stopping_rounds, evals_result, verbose_eval, learning_rates, keep_training_booster, callbacks)\u001b[0m\n\u001b[1;32m    250\u001b[0m                                     evaluation_result_list=None))\n\u001b[1;32m    251\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 252\u001b[0;31m         \u001b[0mbooster\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfobj\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    253\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    254\u001b[0m         \u001b[0mevaluation_result_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/lightgbm/basic.py\u001b[0m in \u001b[0;36mupdate\u001b[0;34m(self, train_set, fobj)\u001b[0m\n\u001b[1;32m   2456\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__set_objective_to_none\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2457\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mLightGBMError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Cannot update due to null objective function.'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2458\u001b[0;31m             _safe_call(_LIB.LGBM_BoosterUpdateOneIter(\n\u001b[0m\u001b[1;32m   2459\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2460\u001b[0m                 ctypes.byref(is_finished)))\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "gs.fit(train_values_subset, df_train_labels.values.ravel())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7657376602545654"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import f1_score\n",
    "\n",
    "in_sample_preds = gs.predict(train_values_subset)\n",
    "f1_score(df_train_labels, in_sample_preds, average='micro')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.758074607885396"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gs.best_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'lgbmclassifier__num_iterations': 100,\n",
       " 'lgbmclassifier__num_leaves': 50,\n",
       " 'lgbmclassifier__objective': 'regression'}"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gs.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'gs' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-df2c2bd0f67e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mgs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbest_params_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'gs' is not defined"
     ]
    }
   ],
   "source": [
    "gs.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "param_grid = {\n",
    "    #'lgbmclassifier__learning_rate': [0.1], \n",
    "    #'lgbmclassifier__n_estimators': [30],\n",
    "    'lgbmclassifier__num_leaves': [40, 50, 60], \n",
    "    'lgbmclassifier__num_iterations': [90, 100, 110], \n",
    "    #'lgbmclassifier__boosting_type': ['gbdt'], \n",
    "    #'lgbmclassifier__max_depth': [10, 30, 60],\n",
    "    'lgbmclassifier__objective': ['regression'], \n",
    "    #'lgbmclassifier__seed': [500],\n",
    "    #'lgbmclassifier__colsample_bytree': [0.65, 0.75, 0.8], \n",
    "    #'lgbmclassifier__subsample': [0.7, 0.75], \n",
    "    #'lgbmclassifier__reg_alpha': [1, 2, 6],\n",
    "    #'lgbmclassifier__reg_lambda': [1, 2, 6]\n",
    "             }\n",
    "\n",
    "gs = GridSearchCV(pipe, param_grid, cv=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=10,\n",
       "             estimator=Pipeline(steps=[('standardscaler', StandardScaler()),\n",
       "                                       ('lgbmclassifier',\n",
       "                                        LGBMClassifier(random_state=2021))]),\n",
       "             param_grid={'lgbmclassifier__num_iterations': [90, 100, 110],\n",
       "                         'lgbmclassifier__num_leaves': [40, 50, 60],\n",
       "                         'lgbmclassifier__objective': ['regression']})"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gs.fit(train_values_subset, df_train_labels.values.ravel())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7686117858335155"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "in_sample_preds = gs.predict(train_values_subset)\n",
    "f1_score(df_train_labels, in_sample_preds, average='micro')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.75819356001739"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gs.best_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'lgbmclassifier__num_iterations': 110,\n",
       " 'lgbmclassifier__num_leaves': 60,\n",
       " 'lgbmclassifier__objective': 'regression'}"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gs.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "param_grid = {\n",
    "    #'lgbmclassifier__learning_rate': [0.1], \n",
    "    #'lgbmclassifier__n_estimators': [30],\n",
    "    'lgbmclassifier__num_leaves': [50, 60, 70], \n",
    "    'lgbmclassifier__num_iterations': [100, 110, 120], \n",
    "    #'lgbmclassifier__boosting_type': ['gbdt'], \n",
    "    #'lgbmclassifier__max_depth': [10, 30, 60],\n",
    "    'lgbmclassifier__objective': ['regression'], \n",
    "    #'lgbmclassifier__seed': [500],\n",
    "    #'lgbmclassifier__colsample_bytree': [0.65, 0.75, 0.8], \n",
    "    #'lgbmclassifier__subsample': [0.7, 0.75], \n",
    "    #'lgbmclassifier__reg_alpha': [1, 2, 6],\n",
    "    #'lgbmclassifier__reg_lambda': [1, 2, 6]\n",
    "             }\n",
    "\n",
    "gs = GridSearchCV(pipe, param_grid, cv=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=10,\n",
       "             estimator=Pipeline(steps=[('standardscaler', StandardScaler()),\n",
       "                                       ('lgbmclassifier',\n",
       "                                        LGBMClassifier(random_state=2021))]),\n",
       "             param_grid={'lgbmclassifier__num_iterations': [100, 110, 120],\n",
       "                         'lgbmclassifier__num_leaves': [50, 60, 70],\n",
       "                         'lgbmclassifier__objective': ['regression']})"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gs.fit(train_values_subset, df_train_labels.values.ravel())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7706148479860015"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "in_sample_preds = gs.predict(train_values_subset)\n",
    "f1_score(df_train_labels, in_sample_preds, average='micro')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.758377752703285"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gs.best_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'lgbmclassifier__num_iterations': 110,\n",
       " 'lgbmclassifier__num_leaves': 70,\n",
       " 'lgbmclassifier__objective': 'regression'}"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gs.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_values = pd.read_csv('test_values.csv', index_col='building_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_values_subset = test_values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "could not convert string to float: 't'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-65-3378fa5a50bc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpredictions\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_values_subset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/sklearn/utils/metaestimators.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    118\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    119\u001b[0m         \u001b[0;31m# lambda, but not partial, allows help() to work with update_wrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 120\u001b[0;31m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    121\u001b[0m         \u001b[0;31m# update the docstring of the returned function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    122\u001b[0m         \u001b[0mupdate_wrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    538\u001b[0m         \"\"\"\n\u001b[1;32m    539\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_is_fitted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'predict'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 540\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbest_estimator_\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    541\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    542\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mif_delegate_has_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdelegate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'best_estimator_'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'estimator'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/sklearn/utils/metaestimators.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    118\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    119\u001b[0m         \u001b[0;31m# lambda, but not partial, allows help() to work with update_wrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 120\u001b[0;31m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    121\u001b[0m         \u001b[0;31m# update the docstring of the returned function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    122\u001b[0m         \u001b[0mupdate_wrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/sklearn/pipeline.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, X, **predict_params)\u001b[0m\n\u001b[1;32m    416\u001b[0m         \u001b[0mXt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    417\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtransform\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwith_final\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 418\u001b[0;31m             \u001b[0mXt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtransform\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mXt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    419\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msteps\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mXt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mpredict_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    420\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/sklearn/preprocessing/_data.py\u001b[0m in \u001b[0;36mtransform\u001b[0;34m(self, X, copy)\u001b[0m\n\u001b[1;32m    881\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    882\u001b[0m         \u001b[0mcopy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcopy\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mcopy\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 883\u001b[0;31m         X = self._validate_data(X, reset=False,\n\u001b[0m\u001b[1;32m    884\u001b[0m                                 \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'csr'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    885\u001b[0m                                 \u001b[0mestimator\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mFLOAT_DTYPES\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    419\u001b[0m             \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    420\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'no_validation'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 421\u001b[0;31m             \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    422\u001b[0m             \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    423\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     61\u001b[0m             \u001b[0mextra_args\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mall_args\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mextra_args\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 63\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m             \u001b[0;31m# extra_args > 0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator)\u001b[0m\n\u001b[1;32m    614\u001b[0m                     \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcasting\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"unsafe\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    615\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 616\u001b[0;31m                     \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    617\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mComplexWarning\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mcomplex_warning\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    618\u001b[0m                 raise ValueError(\"Complex data not supported\\n\"\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/numpy/core/_asarray.py\u001b[0m in \u001b[0;36masarray\u001b[0;34m(a, dtype, order, like)\u001b[0m\n\u001b[1;32m    100\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0m_asarray_with_like\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlike\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlike\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    101\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 102\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    103\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    104\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__array__\u001b[0;34m(self, dtype)\u001b[0m\n\u001b[1;32m   1897\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1898\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__array__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1899\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_values\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1900\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1901\u001b[0m     def __array_wrap__(\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/numpy/core/_asarray.py\u001b[0m in \u001b[0;36masarray\u001b[0;34m(a, dtype, order, like)\u001b[0m\n\u001b[1;32m    100\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0m_asarray_with_like\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlike\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlike\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    101\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 102\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    103\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    104\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: could not convert string to float: 't'"
     ]
    }
   ],
   "source": [
    "predictions = gs.predict(test_values_subset)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "submission_format = pd.read_csv('submission_format.csv', index_col='building_id')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_submission = pd.DataFrame(data=predictions,\n",
    "                             columns=submission_format.columns,\n",
    "                             index=submission_format.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>damage_grade</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>building_id</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>300051</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99355</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890251</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>745817</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>421793</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             damage_grade\n",
       "building_id              \n",
       "300051                  3\n",
       "99355                   2\n",
       "890251                  2\n",
       "745817                  1\n",
       "421793                  3"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_submission.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_submission.to_csv('submissionLGBM_00.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from pandas import read_csv # For dataframes\n",
    "from pandas import DataFrame # For dataframes\n",
    "from numpy import ravel # For matrices\n",
    "import matplotlib.pyplot as plt # For plotting data\n",
    "import seaborn as sns # For plotting data\n",
    "from sklearn.model_selection import train_test_split # For train/test splits\n",
    "from sklearn.neighbors import KNeighborsClassifier # The k-nearest neighbor classifier\n",
    "from sklearn.feature_selection import VarianceThreshold # Feature selector\n",
    "from sklearn.pipeline import Pipeline # For setting up pipeline\n",
    "# Various pre-processing steps\n",
    "from sklearn.preprocessing import Normalizer, StandardScaler, MinMaxScaler, PowerTransformer, MaxAbsScaler, LabelEncoder\n",
    "from sklearn.model_selection import GridSearchCV # For optimization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "param_grid = {\n",
    "    #'scaler':[StandardScaler(), MinMaxScaler(), Normalizer(), MaxAbsScaler()],\n",
    "    #'lgbmclassifier__learning_rate': [0.1, 0.2, 0.3], \n",
    "    #'lgbmclassifier__n_estimators': [30],\n",
    "    'lgbmclassifier__num_leaves': [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200], \n",
    "    #'lgbmclassifier__num_iterations': [100, 110, 120], \n",
    "    #'lgbmclassifier__boosting_type': ['gbdt'], \n",
    "    #'lgbmclassifier__max_depth': [10, 30, 60],\n",
    "    'lgbmclassifier__objective': ['regression'], \n",
    "    #'lgbmclassifier__seed': [500],\n",
    "    #'lgbmclassifier__colsample_bytree': [0.65, 0.75, 0.8], \n",
    "    #'lgbmclassifier__subsample': [0.7, 0.75], \n",
    "    #'lgbmclassifier__reg_alpha': [1, 2, 6],\n",
    "    #'lgbmclassifier__reg_lambda': [1, 2, 6]\n",
    "             }\n",
    "\n",
    "gs = GridSearchCV(pipe, param_grid, cv=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=10,\n",
       "             estimator=Pipeline(steps=[('standardscaler', StandardScaler()),\n",
       "                                       ('lgbmclassifier',\n",
       "                                        LGBMClassifier(random_state=2021))]),\n",
       "             param_grid={'lgbmclassifier__num_leaves': [10, 20, 30, 40, 50, 60,\n",
       "                                                        70, 80, 90, 100, 110,\n",
       "                                                        120, 130, 140, 150, 160,\n",
       "                                                        170, 180, 190, 200],\n",
       "                         'lgbmclassifier__objective': ['regression']})"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gs.fit(train_values_subset, df_train_labels.values.ravel())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7773377692334258"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import f1_score\n",
    "\n",
    "in_sample_preds = gs.predict(train_values_subset)\n",
    "f1_score(df_train_labels, in_sample_preds, average='micro')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'lgbmclassifier__num_leaves': 120, 'lgbmclassifier__objective': 'regression'}\n",
      "Pipeline(steps=[('standardscaler', StandardScaler()),\n",
      "                ('lgbmclassifier',\n",
      "                 LGBMClassifier(num_leaves=120, objective='regression',\n",
      "                                random_state=2021))])\n"
     ]
    }
   ],
   "source": [
    "# Access the best set of parameters\n",
    "best_params = gs.best_params_\n",
    "print(best_params)\n",
    "# Stores the optimum model in best_pipe\n",
    "best_pipe = gs.best_estimator_\n",
    "print(best_pipe)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['mean_fit_time', 'std_fit_time', 'mean_score_time', 'std_score_time',\n",
      "       'param_lgbmclassifier__num_leaves', 'param_lgbmclassifier__objective',\n",
      "       'params', 'split0_test_score', 'split1_test_score', 'split2_test_score',\n",
      "       'split3_test_score', 'split4_test_score', 'split5_test_score',\n",
      "       'split6_test_score', 'split7_test_score', 'split8_test_score',\n",
      "       'split9_test_score', 'mean_test_score', 'std_test_score',\n",
      "       'rank_test_score'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "result_df = pd.DataFrame.from_dict(gs.cv_results_, orient='columns')\n",
    "print(result_df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_fit_time</th>\n",
       "      <th>std_fit_time</th>\n",
       "      <th>mean_score_time</th>\n",
       "      <th>std_score_time</th>\n",
       "      <th>param_lgbmclassifier__num_leaves</th>\n",
       "      <th>param_lgbmclassifier__objective</th>\n",
       "      <th>params</th>\n",
       "      <th>split0_test_score</th>\n",
       "      <th>split1_test_score</th>\n",
       "      <th>split2_test_score</th>\n",
       "      <th>split3_test_score</th>\n",
       "      <th>split4_test_score</th>\n",
       "      <th>split5_test_score</th>\n",
       "      <th>split6_test_score</th>\n",
       "      <th>split7_test_score</th>\n",
       "      <th>split8_test_score</th>\n",
       "      <th>split9_test_score</th>\n",
       "      <th>mean_test_score</th>\n",
       "      <th>std_test_score</th>\n",
       "      <th>rank_test_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10.918712</td>\n",
       "      <td>1.137771</td>\n",
       "      <td>0.343283</td>\n",
       "      <td>0.037708</td>\n",
       "      <td>10</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__num_leaves': 10, 'lgbmclassi...</td>\n",
       "      <td>0.751813</td>\n",
       "      <td>0.755334</td>\n",
       "      <td>0.752571</td>\n",
       "      <td>0.749962</td>\n",
       "      <td>0.759133</td>\n",
       "      <td>0.752187</td>\n",
       "      <td>0.755986</td>\n",
       "      <td>0.757099</td>\n",
       "      <td>0.757406</td>\n",
       "      <td>0.754144</td>\n",
       "      <td>0.754564</td>\n",
       "      <td>0.002767</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>11.979138</td>\n",
       "      <td>1.422715</td>\n",
       "      <td>0.471425</td>\n",
       "      <td>0.052359</td>\n",
       "      <td>20</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__num_leaves': 20, 'lgbmclassi...</td>\n",
       "      <td>0.755036</td>\n",
       "      <td>0.756754</td>\n",
       "      <td>0.754029</td>\n",
       "      <td>0.752379</td>\n",
       "      <td>0.760860</td>\n",
       "      <td>0.753569</td>\n",
       "      <td>0.756907</td>\n",
       "      <td>0.759478</td>\n",
       "      <td>0.758941</td>\n",
       "      <td>0.755180</td>\n",
       "      <td>0.756313</td>\n",
       "      <td>0.002632</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>15.707010</td>\n",
       "      <td>1.361122</td>\n",
       "      <td>0.481473</td>\n",
       "      <td>0.044266</td>\n",
       "      <td>30</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__num_leaves': 30, 'lgbmclassi...</td>\n",
       "      <td>0.755880</td>\n",
       "      <td>0.758404</td>\n",
       "      <td>0.753607</td>\n",
       "      <td>0.753185</td>\n",
       "      <td>0.762087</td>\n",
       "      <td>0.754068</td>\n",
       "      <td>0.756984</td>\n",
       "      <td>0.758787</td>\n",
       "      <td>0.759517</td>\n",
       "      <td>0.755065</td>\n",
       "      <td>0.756758</td>\n",
       "      <td>0.002765</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>16.754056</td>\n",
       "      <td>1.732390</td>\n",
       "      <td>0.553363</td>\n",
       "      <td>0.092902</td>\n",
       "      <td>40</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__num_leaves': 40, 'lgbmclassi...</td>\n",
       "      <td>0.755804</td>\n",
       "      <td>0.758173</td>\n",
       "      <td>0.754029</td>\n",
       "      <td>0.753377</td>\n",
       "      <td>0.761896</td>\n",
       "      <td>0.754566</td>\n",
       "      <td>0.758135</td>\n",
       "      <td>0.760092</td>\n",
       "      <td>0.759363</td>\n",
       "      <td>0.756216</td>\n",
       "      <td>0.757165</td>\n",
       "      <td>0.002673</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20.815114</td>\n",
       "      <td>3.135125</td>\n",
       "      <td>0.598734</td>\n",
       "      <td>0.100651</td>\n",
       "      <td>50</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__num_leaves': 50, 'lgbmclassi...</td>\n",
       "      <td>0.757185</td>\n",
       "      <td>0.758058</td>\n",
       "      <td>0.755449</td>\n",
       "      <td>0.754183</td>\n",
       "      <td>0.762970</td>\n",
       "      <td>0.755257</td>\n",
       "      <td>0.758979</td>\n",
       "      <td>0.760898</td>\n",
       "      <td>0.760975</td>\n",
       "      <td>0.756792</td>\n",
       "      <td>0.758075</td>\n",
       "      <td>0.002713</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>19.440969</td>\n",
       "      <td>3.861506</td>\n",
       "      <td>0.584454</td>\n",
       "      <td>0.061046</td>\n",
       "      <td>60</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__num_leaves': 60, 'lgbmclassi...</td>\n",
       "      <td>0.758068</td>\n",
       "      <td>0.758250</td>\n",
       "      <td>0.754873</td>\n",
       "      <td>0.754106</td>\n",
       "      <td>0.763661</td>\n",
       "      <td>0.755257</td>\n",
       "      <td>0.759018</td>\n",
       "      <td>0.760936</td>\n",
       "      <td>0.759977</td>\n",
       "      <td>0.756332</td>\n",
       "      <td>0.758048</td>\n",
       "      <td>0.002844</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>19.892043</td>\n",
       "      <td>3.614895</td>\n",
       "      <td>0.582489</td>\n",
       "      <td>0.068363</td>\n",
       "      <td>70</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__num_leaves': 70, 'lgbmclassi...</td>\n",
       "      <td>0.757492</td>\n",
       "      <td>0.758596</td>\n",
       "      <td>0.756485</td>\n",
       "      <td>0.753684</td>\n",
       "      <td>0.763124</td>\n",
       "      <td>0.754375</td>\n",
       "      <td>0.758557</td>\n",
       "      <td>0.762471</td>\n",
       "      <td>0.760169</td>\n",
       "      <td>0.757214</td>\n",
       "      <td>0.758217</td>\n",
       "      <td>0.002934</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>24.852587</td>\n",
       "      <td>4.703184</td>\n",
       "      <td>0.584828</td>\n",
       "      <td>0.044991</td>\n",
       "      <td>80</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__num_leaves': 80, 'lgbmclassi...</td>\n",
       "      <td>0.757914</td>\n",
       "      <td>0.758557</td>\n",
       "      <td>0.756408</td>\n",
       "      <td>0.754183</td>\n",
       "      <td>0.764006</td>\n",
       "      <td>0.755142</td>\n",
       "      <td>0.760015</td>\n",
       "      <td>0.761857</td>\n",
       "      <td>0.761781</td>\n",
       "      <td>0.756677</td>\n",
       "      <td>0.758654</td>\n",
       "      <td>0.003039</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>23.815314</td>\n",
       "      <td>5.603614</td>\n",
       "      <td>0.609592</td>\n",
       "      <td>0.075260</td>\n",
       "      <td>90</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__num_leaves': 90, 'lgbmclassi...</td>\n",
       "      <td>0.757799</td>\n",
       "      <td>0.758787</td>\n",
       "      <td>0.755909</td>\n",
       "      <td>0.754682</td>\n",
       "      <td>0.763968</td>\n",
       "      <td>0.755833</td>\n",
       "      <td>0.760169</td>\n",
       "      <td>0.761550</td>\n",
       "      <td>0.760744</td>\n",
       "      <td>0.757291</td>\n",
       "      <td>0.758673</td>\n",
       "      <td>0.002778</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>23.211909</td>\n",
       "      <td>2.210776</td>\n",
       "      <td>0.638590</td>\n",
       "      <td>0.060697</td>\n",
       "      <td>100</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__num_leaves': 100, 'lgbmclass...</td>\n",
       "      <td>0.757530</td>\n",
       "      <td>0.759171</td>\n",
       "      <td>0.755756</td>\n",
       "      <td>0.754528</td>\n",
       "      <td>0.764121</td>\n",
       "      <td>0.755679</td>\n",
       "      <td>0.759286</td>\n",
       "      <td>0.763699</td>\n",
       "      <td>0.761167</td>\n",
       "      <td>0.757176</td>\n",
       "      <td>0.758811</td>\n",
       "      <td>0.003159</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>25.479274</td>\n",
       "      <td>4.985168</td>\n",
       "      <td>0.700721</td>\n",
       "      <td>0.037794</td>\n",
       "      <td>110</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__num_leaves': 110, 'lgbmclass...</td>\n",
       "      <td>0.757492</td>\n",
       "      <td>0.759977</td>\n",
       "      <td>0.756523</td>\n",
       "      <td>0.754490</td>\n",
       "      <td>0.763776</td>\n",
       "      <td>0.755641</td>\n",
       "      <td>0.760092</td>\n",
       "      <td>0.761896</td>\n",
       "      <td>0.760169</td>\n",
       "      <td>0.758365</td>\n",
       "      <td>0.758842</td>\n",
       "      <td>0.002737</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>25.361399</td>\n",
       "      <td>5.366340</td>\n",
       "      <td>0.678879</td>\n",
       "      <td>0.069912</td>\n",
       "      <td>120</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__num_leaves': 120, 'lgbmclass...</td>\n",
       "      <td>0.757761</td>\n",
       "      <td>0.760476</td>\n",
       "      <td>0.757176</td>\n",
       "      <td>0.754797</td>\n",
       "      <td>0.763431</td>\n",
       "      <td>0.757022</td>\n",
       "      <td>0.760783</td>\n",
       "      <td>0.762932</td>\n",
       "      <td>0.760629</td>\n",
       "      <td>0.757598</td>\n",
       "      <td>0.759260</td>\n",
       "      <td>0.002661</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>27.336456</td>\n",
       "      <td>6.234517</td>\n",
       "      <td>0.714943</td>\n",
       "      <td>0.068823</td>\n",
       "      <td>130</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__num_leaves': 130, 'lgbmclass...</td>\n",
       "      <td>0.758643</td>\n",
       "      <td>0.759632</td>\n",
       "      <td>0.755487</td>\n",
       "      <td>0.754682</td>\n",
       "      <td>0.763008</td>\n",
       "      <td>0.758135</td>\n",
       "      <td>0.759363</td>\n",
       "      <td>0.762778</td>\n",
       "      <td>0.760130</td>\n",
       "      <td>0.757406</td>\n",
       "      <td>0.758926</td>\n",
       "      <td>0.002579</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>31.799819</td>\n",
       "      <td>9.781685</td>\n",
       "      <td>0.694087</td>\n",
       "      <td>0.061923</td>\n",
       "      <td>140</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__num_leaves': 140, 'lgbmclass...</td>\n",
       "      <td>0.759104</td>\n",
       "      <td>0.759018</td>\n",
       "      <td>0.756025</td>\n",
       "      <td>0.755449</td>\n",
       "      <td>0.763200</td>\n",
       "      <td>0.757828</td>\n",
       "      <td>0.760322</td>\n",
       "      <td>0.763162</td>\n",
       "      <td>0.761665</td>\n",
       "      <td>0.756639</td>\n",
       "      <td>0.759241</td>\n",
       "      <td>0.002677</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>24.036732</td>\n",
       "      <td>6.418465</td>\n",
       "      <td>0.635857</td>\n",
       "      <td>0.053016</td>\n",
       "      <td>150</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__num_leaves': 150, 'lgbmclass...</td>\n",
       "      <td>0.758490</td>\n",
       "      <td>0.759478</td>\n",
       "      <td>0.756600</td>\n",
       "      <td>0.754528</td>\n",
       "      <td>0.763622</td>\n",
       "      <td>0.756754</td>\n",
       "      <td>0.760706</td>\n",
       "      <td>0.763431</td>\n",
       "      <td>0.761857</td>\n",
       "      <td>0.757099</td>\n",
       "      <td>0.759256</td>\n",
       "      <td>0.002938</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>33.293388</td>\n",
       "      <td>5.402045</td>\n",
       "      <td>0.709937</td>\n",
       "      <td>0.050495</td>\n",
       "      <td>160</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__num_leaves': 160, 'lgbmclass...</td>\n",
       "      <td>0.757991</td>\n",
       "      <td>0.758327</td>\n",
       "      <td>0.756101</td>\n",
       "      <td>0.755602</td>\n",
       "      <td>0.763546</td>\n",
       "      <td>0.756523</td>\n",
       "      <td>0.759632</td>\n",
       "      <td>0.762510</td>\n",
       "      <td>0.761051</td>\n",
       "      <td>0.758135</td>\n",
       "      <td>0.758942</td>\n",
       "      <td>0.002566</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>27.142794</td>\n",
       "      <td>4.979184</td>\n",
       "      <td>0.792065</td>\n",
       "      <td>0.092210</td>\n",
       "      <td>170</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__num_leaves': 170, 'lgbmclass...</td>\n",
       "      <td>0.757377</td>\n",
       "      <td>0.759785</td>\n",
       "      <td>0.757790</td>\n",
       "      <td>0.754873</td>\n",
       "      <td>0.762740</td>\n",
       "      <td>0.756178</td>\n",
       "      <td>0.760860</td>\n",
       "      <td>0.761512</td>\n",
       "      <td>0.761435</td>\n",
       "      <td>0.757099</td>\n",
       "      <td>0.758965</td>\n",
       "      <td>0.002510</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>31.852325</td>\n",
       "      <td>7.980078</td>\n",
       "      <td>0.771367</td>\n",
       "      <td>0.066224</td>\n",
       "      <td>180</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__num_leaves': 180, 'lgbmclass...</td>\n",
       "      <td>0.757914</td>\n",
       "      <td>0.758596</td>\n",
       "      <td>0.757022</td>\n",
       "      <td>0.755104</td>\n",
       "      <td>0.763392</td>\n",
       "      <td>0.756408</td>\n",
       "      <td>0.761090</td>\n",
       "      <td>0.763354</td>\n",
       "      <td>0.761627</td>\n",
       "      <td>0.757291</td>\n",
       "      <td>0.759180</td>\n",
       "      <td>0.002815</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>31.698663</td>\n",
       "      <td>9.119823</td>\n",
       "      <td>0.785698</td>\n",
       "      <td>0.086653</td>\n",
       "      <td>190</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__num_leaves': 190, 'lgbmclass...</td>\n",
       "      <td>0.757032</td>\n",
       "      <td>0.759286</td>\n",
       "      <td>0.757137</td>\n",
       "      <td>0.755295</td>\n",
       "      <td>0.763699</td>\n",
       "      <td>0.757061</td>\n",
       "      <td>0.760054</td>\n",
       "      <td>0.763584</td>\n",
       "      <td>0.761282</td>\n",
       "      <td>0.757943</td>\n",
       "      <td>0.759237</td>\n",
       "      <td>0.002736</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>26.339101</td>\n",
       "      <td>8.378498</td>\n",
       "      <td>0.762081</td>\n",
       "      <td>0.075366</td>\n",
       "      <td>200</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__num_leaves': 200, 'lgbmclass...</td>\n",
       "      <td>0.759641</td>\n",
       "      <td>0.758519</td>\n",
       "      <td>0.755948</td>\n",
       "      <td>0.755449</td>\n",
       "      <td>0.763162</td>\n",
       "      <td>0.757176</td>\n",
       "      <td>0.760399</td>\n",
       "      <td>0.763507</td>\n",
       "      <td>0.759440</td>\n",
       "      <td>0.756332</td>\n",
       "      <td>0.758957</td>\n",
       "      <td>0.002698</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    mean_fit_time  std_fit_time  mean_score_time  std_score_time  \\\n",
       "0       10.918712      1.137771         0.343283        0.037708   \n",
       "1       11.979138      1.422715         0.471425        0.052359   \n",
       "2       15.707010      1.361122         0.481473        0.044266   \n",
       "3       16.754056      1.732390         0.553363        0.092902   \n",
       "4       20.815114      3.135125         0.598734        0.100651   \n",
       "5       19.440969      3.861506         0.584454        0.061046   \n",
       "6       19.892043      3.614895         0.582489        0.068363   \n",
       "7       24.852587      4.703184         0.584828        0.044991   \n",
       "8       23.815314      5.603614         0.609592        0.075260   \n",
       "9       23.211909      2.210776         0.638590        0.060697   \n",
       "10      25.479274      4.985168         0.700721        0.037794   \n",
       "11      25.361399      5.366340         0.678879        0.069912   \n",
       "12      27.336456      6.234517         0.714943        0.068823   \n",
       "13      31.799819      9.781685         0.694087        0.061923   \n",
       "14      24.036732      6.418465         0.635857        0.053016   \n",
       "15      33.293388      5.402045         0.709937        0.050495   \n",
       "16      27.142794      4.979184         0.792065        0.092210   \n",
       "17      31.852325      7.980078         0.771367        0.066224   \n",
       "18      31.698663      9.119823         0.785698        0.086653   \n",
       "19      26.339101      8.378498         0.762081        0.075366   \n",
       "\n",
       "   param_lgbmclassifier__num_leaves param_lgbmclassifier__objective  \\\n",
       "0                                10                      regression   \n",
       "1                                20                      regression   \n",
       "2                                30                      regression   \n",
       "3                                40                      regression   \n",
       "4                                50                      regression   \n",
       "5                                60                      regression   \n",
       "6                                70                      regression   \n",
       "7                                80                      regression   \n",
       "8                                90                      regression   \n",
       "9                               100                      regression   \n",
       "10                              110                      regression   \n",
       "11                              120                      regression   \n",
       "12                              130                      regression   \n",
       "13                              140                      regression   \n",
       "14                              150                      regression   \n",
       "15                              160                      regression   \n",
       "16                              170                      regression   \n",
       "17                              180                      regression   \n",
       "18                              190                      regression   \n",
       "19                              200                      regression   \n",
       "\n",
       "                                               params  split0_test_score  \\\n",
       "0   {'lgbmclassifier__num_leaves': 10, 'lgbmclassi...           0.751813   \n",
       "1   {'lgbmclassifier__num_leaves': 20, 'lgbmclassi...           0.755036   \n",
       "2   {'lgbmclassifier__num_leaves': 30, 'lgbmclassi...           0.755880   \n",
       "3   {'lgbmclassifier__num_leaves': 40, 'lgbmclassi...           0.755804   \n",
       "4   {'lgbmclassifier__num_leaves': 50, 'lgbmclassi...           0.757185   \n",
       "5   {'lgbmclassifier__num_leaves': 60, 'lgbmclassi...           0.758068   \n",
       "6   {'lgbmclassifier__num_leaves': 70, 'lgbmclassi...           0.757492   \n",
       "7   {'lgbmclassifier__num_leaves': 80, 'lgbmclassi...           0.757914   \n",
       "8   {'lgbmclassifier__num_leaves': 90, 'lgbmclassi...           0.757799   \n",
       "9   {'lgbmclassifier__num_leaves': 100, 'lgbmclass...           0.757530   \n",
       "10  {'lgbmclassifier__num_leaves': 110, 'lgbmclass...           0.757492   \n",
       "11  {'lgbmclassifier__num_leaves': 120, 'lgbmclass...           0.757761   \n",
       "12  {'lgbmclassifier__num_leaves': 130, 'lgbmclass...           0.758643   \n",
       "13  {'lgbmclassifier__num_leaves': 140, 'lgbmclass...           0.759104   \n",
       "14  {'lgbmclassifier__num_leaves': 150, 'lgbmclass...           0.758490   \n",
       "15  {'lgbmclassifier__num_leaves': 160, 'lgbmclass...           0.757991   \n",
       "16  {'lgbmclassifier__num_leaves': 170, 'lgbmclass...           0.757377   \n",
       "17  {'lgbmclassifier__num_leaves': 180, 'lgbmclass...           0.757914   \n",
       "18  {'lgbmclassifier__num_leaves': 190, 'lgbmclass...           0.757032   \n",
       "19  {'lgbmclassifier__num_leaves': 200, 'lgbmclass...           0.759641   \n",
       "\n",
       "    split1_test_score  split2_test_score  split3_test_score  \\\n",
       "0            0.755334           0.752571           0.749962   \n",
       "1            0.756754           0.754029           0.752379   \n",
       "2            0.758404           0.753607           0.753185   \n",
       "3            0.758173           0.754029           0.753377   \n",
       "4            0.758058           0.755449           0.754183   \n",
       "5            0.758250           0.754873           0.754106   \n",
       "6            0.758596           0.756485           0.753684   \n",
       "7            0.758557           0.756408           0.754183   \n",
       "8            0.758787           0.755909           0.754682   \n",
       "9            0.759171           0.755756           0.754528   \n",
       "10           0.759977           0.756523           0.754490   \n",
       "11           0.760476           0.757176           0.754797   \n",
       "12           0.759632           0.755487           0.754682   \n",
       "13           0.759018           0.756025           0.755449   \n",
       "14           0.759478           0.756600           0.754528   \n",
       "15           0.758327           0.756101           0.755602   \n",
       "16           0.759785           0.757790           0.754873   \n",
       "17           0.758596           0.757022           0.755104   \n",
       "18           0.759286           0.757137           0.755295   \n",
       "19           0.758519           0.755948           0.755449   \n",
       "\n",
       "    split4_test_score  split5_test_score  split6_test_score  \\\n",
       "0            0.759133           0.752187           0.755986   \n",
       "1            0.760860           0.753569           0.756907   \n",
       "2            0.762087           0.754068           0.756984   \n",
       "3            0.761896           0.754566           0.758135   \n",
       "4            0.762970           0.755257           0.758979   \n",
       "5            0.763661           0.755257           0.759018   \n",
       "6            0.763124           0.754375           0.758557   \n",
       "7            0.764006           0.755142           0.760015   \n",
       "8            0.763968           0.755833           0.760169   \n",
       "9            0.764121           0.755679           0.759286   \n",
       "10           0.763776           0.755641           0.760092   \n",
       "11           0.763431           0.757022           0.760783   \n",
       "12           0.763008           0.758135           0.759363   \n",
       "13           0.763200           0.757828           0.760322   \n",
       "14           0.763622           0.756754           0.760706   \n",
       "15           0.763546           0.756523           0.759632   \n",
       "16           0.762740           0.756178           0.760860   \n",
       "17           0.763392           0.756408           0.761090   \n",
       "18           0.763699           0.757061           0.760054   \n",
       "19           0.763162           0.757176           0.760399   \n",
       "\n",
       "    split7_test_score  split8_test_score  split9_test_score  mean_test_score  \\\n",
       "0            0.757099           0.757406           0.754144         0.754564   \n",
       "1            0.759478           0.758941           0.755180         0.756313   \n",
       "2            0.758787           0.759517           0.755065         0.756758   \n",
       "3            0.760092           0.759363           0.756216         0.757165   \n",
       "4            0.760898           0.760975           0.756792         0.758075   \n",
       "5            0.760936           0.759977           0.756332         0.758048   \n",
       "6            0.762471           0.760169           0.757214         0.758217   \n",
       "7            0.761857           0.761781           0.756677         0.758654   \n",
       "8            0.761550           0.760744           0.757291         0.758673   \n",
       "9            0.763699           0.761167           0.757176         0.758811   \n",
       "10           0.761896           0.760169           0.758365         0.758842   \n",
       "11           0.762932           0.760629           0.757598         0.759260   \n",
       "12           0.762778           0.760130           0.757406         0.758926   \n",
       "13           0.763162           0.761665           0.756639         0.759241   \n",
       "14           0.763431           0.761857           0.757099         0.759256   \n",
       "15           0.762510           0.761051           0.758135         0.758942   \n",
       "16           0.761512           0.761435           0.757099         0.758965   \n",
       "17           0.763354           0.761627           0.757291         0.759180   \n",
       "18           0.763584           0.761282           0.757943         0.759237   \n",
       "19           0.763507           0.759440           0.756332         0.758957   \n",
       "\n",
       "    std_test_score  rank_test_score  \n",
       "0         0.002767               20  \n",
       "1         0.002632               19  \n",
       "2         0.002765               18  \n",
       "3         0.002673               17  \n",
       "4         0.002713               15  \n",
       "5         0.002844               16  \n",
       "6         0.002934               14  \n",
       "7         0.003039               13  \n",
       "8         0.002778               12  \n",
       "9         0.003159               11  \n",
       "10        0.002737               10  \n",
       "11        0.002661                1  \n",
       "12        0.002579                9  \n",
       "13        0.002677                3  \n",
       "14        0.002938                2  \n",
       "15        0.002566                8  \n",
       "16        0.002510                6  \n",
       "17        0.002815                5  \n",
       "18        0.002736                4  \n",
       "19        0.002698                7  "
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 530.5x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = sns.relplot(data=result_df,\n",
    "\tkind='line',\n",
    "\tx='param_lgbmclassifier__num_leaves',\n",
    "\ty='mean_test_score',\n",
    "\thue='param_lgbmclassifier__objective',\n",
    "\t#col='param_classifier__p'\n",
    "           )\n",
    "\n",
    "g.set_titles('evolucion de scores por cantidad de hojas usadas - LightGBM')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "param_grid = {\n",
    "    #'scaler':[StandardScaler(), MinMaxScaler(), Normalizer(), MaxAbsScaler()],\n",
    "    'lgbmclassifier__learning_rate': [0.01, 0.05, 0.1], \n",
    "    #'lgbmclassifier__n_estimators': [30],\n",
    "    #'lgbmclassifier__num_leaves': [10, 50, 100, 150, 175 200, 225, 250, 275, 300], \n",
    "    #'lgbmclassifier__num_iterations': [10, 15, 20], \n",
    "    #'lgbmclassifier__boosting_type': ['gbdt'], \n",
    "    'lgbmclassifier__max_depth': [10, 50, 100, 150, 175, 200, 225, 250, 275, 300],\n",
    "    'lgbmclassifier__objective': ['regression'], \n",
    "    #'lgbmclassifier__seed': [500],\n",
    "    #'lgbmclassifier__colsample_bytree': [0.65, 0.75, 0.8], \n",
    "    #'lgbmclassifier__subsample': [0.7, 0.75], \n",
    "    #'lgbmclassifier__reg_alpha': [1, 2, 6],\n",
    "    #'lgbmclassifier__reg_lambda': [1, 2, 6]\n",
    "             }\n",
    "\n",
    "gs = GridSearchCV(pipe, param_grid, cv=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n",
      "[LightGBM] [Warning] Accuracy may be bad since you didn't explicitly set num_leaves OR 2^max_depth > num_leaves. (num_leaves=31).\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5,\n",
       "             estimator=Pipeline(steps=[('standardscaler', StandardScaler()),\n",
       "                                       ('lgbmclassifier',\n",
       "                                        LGBMClassifier(random_state=2021))]),\n",
       "             param_grid={'lgbmclassifier__learning_rate': [0.01, 0.05, 0.1],\n",
       "                         'lgbmclassifier__max_depth': [10, 50, 100, 150, 175,\n",
       "                                                       200, 225, 250, 275,\n",
       "                                                       300],\n",
       "                         'lgbmclassifier__objective': ['regression']})"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gs.fit(train_values_subset, df_train_labels.values.ravel())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7617890952068488"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import f1_score\n",
    "\n",
    "in_sample_preds = gs.predict(train_values_subset)\n",
    "f1_score(df_train_labels, in_sample_preds, average='micro')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'lgbmclassifier__learning_rate': 0.1, 'lgbmclassifier__max_depth': 50, 'lgbmclassifier__objective': 'regression'}\n",
      "Pipeline(steps=[('standardscaler', StandardScaler()),\n",
      "                ('lgbmclassifier',\n",
      "                 LGBMClassifier(max_depth=50, objective='regression',\n",
      "                                random_state=2021))])\n"
     ]
    }
   ],
   "source": [
    "# Access the best set of parameters\n",
    "best_params = gs.best_params_\n",
    "print(best_params)\n",
    "# Stores the optimum model in best_pipe\n",
    "best_pipe = gs.best_estimator_\n",
    "print(best_pipe)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['mean_fit_time', 'std_fit_time', 'mean_score_time', 'std_score_time',\n",
      "       'param_lgbmclassifier__learning_rate',\n",
      "       'param_lgbmclassifier__max_depth', 'param_lgbmclassifier__objective',\n",
      "       'params', 'split0_test_score', 'split1_test_score', 'split2_test_score',\n",
      "       'split3_test_score', 'split4_test_score', 'mean_test_score',\n",
      "       'std_test_score', 'rank_test_score'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "result_df = pd.DataFrame.from_dict(gs.cv_results_, orient='columns')\n",
    "print(result_df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_fit_time</th>\n",
       "      <th>std_fit_time</th>\n",
       "      <th>mean_score_time</th>\n",
       "      <th>std_score_time</th>\n",
       "      <th>param_lgbmclassifier__learning_rate</th>\n",
       "      <th>param_lgbmclassifier__max_depth</th>\n",
       "      <th>param_lgbmclassifier__objective</th>\n",
       "      <th>params</th>\n",
       "      <th>split0_test_score</th>\n",
       "      <th>split1_test_score</th>\n",
       "      <th>split2_test_score</th>\n",
       "      <th>split3_test_score</th>\n",
       "      <th>split4_test_score</th>\n",
       "      <th>mean_test_score</th>\n",
       "      <th>std_test_score</th>\n",
       "      <th>rank_test_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.393009</td>\n",
       "      <td>0.576685</td>\n",
       "      <td>0.370357</td>\n",
       "      <td>0.040636</td>\n",
       "      <td>0.01</td>\n",
       "      <td>10</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.742369</td>\n",
       "      <td>0.738277</td>\n",
       "      <td>0.743573</td>\n",
       "      <td>0.744302</td>\n",
       "      <td>0.741117</td>\n",
       "      <td>0.741927</td>\n",
       "      <td>0.002122</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.882898</td>\n",
       "      <td>0.401493</td>\n",
       "      <td>0.352737</td>\n",
       "      <td>0.037549</td>\n",
       "      <td>0.01</td>\n",
       "      <td>50</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.742369</td>\n",
       "      <td>0.738277</td>\n",
       "      <td>0.743573</td>\n",
       "      <td>0.744302</td>\n",
       "      <td>0.741117</td>\n",
       "      <td>0.741927</td>\n",
       "      <td>0.002122</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.659380</td>\n",
       "      <td>0.112408</td>\n",
       "      <td>0.336542</td>\n",
       "      <td>0.034890</td>\n",
       "      <td>0.01</td>\n",
       "      <td>100</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.742369</td>\n",
       "      <td>0.738277</td>\n",
       "      <td>0.743573</td>\n",
       "      <td>0.744302</td>\n",
       "      <td>0.741117</td>\n",
       "      <td>0.741927</td>\n",
       "      <td>0.002122</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.708688</td>\n",
       "      <td>0.174315</td>\n",
       "      <td>0.357509</td>\n",
       "      <td>0.033317</td>\n",
       "      <td>0.01</td>\n",
       "      <td>150</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.742369</td>\n",
       "      <td>0.738277</td>\n",
       "      <td>0.743573</td>\n",
       "      <td>0.744302</td>\n",
       "      <td>0.741117</td>\n",
       "      <td>0.741927</td>\n",
       "      <td>0.002122</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.612076</td>\n",
       "      <td>0.105466</td>\n",
       "      <td>0.339967</td>\n",
       "      <td>0.033908</td>\n",
       "      <td>0.01</td>\n",
       "      <td>175</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.742369</td>\n",
       "      <td>0.738277</td>\n",
       "      <td>0.743573</td>\n",
       "      <td>0.744302</td>\n",
       "      <td>0.741117</td>\n",
       "      <td>0.741927</td>\n",
       "      <td>0.002122</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>4.534542</td>\n",
       "      <td>0.161139</td>\n",
       "      <td>0.339244</td>\n",
       "      <td>0.026136</td>\n",
       "      <td>0.01</td>\n",
       "      <td>200</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.742369</td>\n",
       "      <td>0.738277</td>\n",
       "      <td>0.743573</td>\n",
       "      <td>0.744302</td>\n",
       "      <td>0.741117</td>\n",
       "      <td>0.741927</td>\n",
       "      <td>0.002122</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>4.844571</td>\n",
       "      <td>0.235400</td>\n",
       "      <td>0.353835</td>\n",
       "      <td>0.027192</td>\n",
       "      <td>0.01</td>\n",
       "      <td>225</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.742369</td>\n",
       "      <td>0.738277</td>\n",
       "      <td>0.743573</td>\n",
       "      <td>0.744302</td>\n",
       "      <td>0.741117</td>\n",
       "      <td>0.741927</td>\n",
       "      <td>0.002122</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>4.685402</td>\n",
       "      <td>0.161266</td>\n",
       "      <td>0.337116</td>\n",
       "      <td>0.025812</td>\n",
       "      <td>0.01</td>\n",
       "      <td>250</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.742369</td>\n",
       "      <td>0.738277</td>\n",
       "      <td>0.743573</td>\n",
       "      <td>0.744302</td>\n",
       "      <td>0.741117</td>\n",
       "      <td>0.741927</td>\n",
       "      <td>0.002122</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>4.897485</td>\n",
       "      <td>0.157077</td>\n",
       "      <td>0.338547</td>\n",
       "      <td>0.036404</td>\n",
       "      <td>0.01</td>\n",
       "      <td>275</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.742369</td>\n",
       "      <td>0.738277</td>\n",
       "      <td>0.743573</td>\n",
       "      <td>0.744302</td>\n",
       "      <td>0.741117</td>\n",
       "      <td>0.741927</td>\n",
       "      <td>0.002122</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>4.913765</td>\n",
       "      <td>0.279080</td>\n",
       "      <td>0.323447</td>\n",
       "      <td>0.029426</td>\n",
       "      <td>0.01</td>\n",
       "      <td>300</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.742369</td>\n",
       "      <td>0.738277</td>\n",
       "      <td>0.743573</td>\n",
       "      <td>0.744302</td>\n",
       "      <td>0.741117</td>\n",
       "      <td>0.741927</td>\n",
       "      <td>0.002122</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>4.645632</td>\n",
       "      <td>0.046469</td>\n",
       "      <td>0.464581</td>\n",
       "      <td>0.044891</td>\n",
       "      <td>0.05</td>\n",
       "      <td>10</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.755991</td>\n",
       "      <td>0.752034</td>\n",
       "      <td>0.756236</td>\n",
       "      <td>0.757483</td>\n",
       "      <td>0.755948</td>\n",
       "      <td>0.755538</td>\n",
       "      <td>0.001840</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>4.854978</td>\n",
       "      <td>0.273230</td>\n",
       "      <td>0.489626</td>\n",
       "      <td>0.035991</td>\n",
       "      <td>0.05</td>\n",
       "      <td>50</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.755818</td>\n",
       "      <td>0.752245</td>\n",
       "      <td>0.756581</td>\n",
       "      <td>0.757521</td>\n",
       "      <td>0.755602</td>\n",
       "      <td>0.755554</td>\n",
       "      <td>0.001786</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>4.774570</td>\n",
       "      <td>0.134759</td>\n",
       "      <td>0.489724</td>\n",
       "      <td>0.040040</td>\n",
       "      <td>0.05</td>\n",
       "      <td>100</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.755818</td>\n",
       "      <td>0.752245</td>\n",
       "      <td>0.756581</td>\n",
       "      <td>0.757521</td>\n",
       "      <td>0.755602</td>\n",
       "      <td>0.755554</td>\n",
       "      <td>0.001786</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>4.801131</td>\n",
       "      <td>0.167093</td>\n",
       "      <td>0.562892</td>\n",
       "      <td>0.099310</td>\n",
       "      <td>0.05</td>\n",
       "      <td>150</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.755818</td>\n",
       "      <td>0.752245</td>\n",
       "      <td>0.756581</td>\n",
       "      <td>0.757521</td>\n",
       "      <td>0.755602</td>\n",
       "      <td>0.755554</td>\n",
       "      <td>0.001786</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>4.951797</td>\n",
       "      <td>0.263496</td>\n",
       "      <td>0.492938</td>\n",
       "      <td>0.036891</td>\n",
       "      <td>0.05</td>\n",
       "      <td>175</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.755818</td>\n",
       "      <td>0.752245</td>\n",
       "      <td>0.756581</td>\n",
       "      <td>0.757521</td>\n",
       "      <td>0.755602</td>\n",
       "      <td>0.755554</td>\n",
       "      <td>0.001786</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>4.625626</td>\n",
       "      <td>0.147011</td>\n",
       "      <td>0.463454</td>\n",
       "      <td>0.044923</td>\n",
       "      <td>0.05</td>\n",
       "      <td>200</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.755818</td>\n",
       "      <td>0.752245</td>\n",
       "      <td>0.756581</td>\n",
       "      <td>0.757521</td>\n",
       "      <td>0.755602</td>\n",
       "      <td>0.755554</td>\n",
       "      <td>0.001786</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>4.710643</td>\n",
       "      <td>0.108743</td>\n",
       "      <td>0.459066</td>\n",
       "      <td>0.029431</td>\n",
       "      <td>0.05</td>\n",
       "      <td>225</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.755818</td>\n",
       "      <td>0.752245</td>\n",
       "      <td>0.756581</td>\n",
       "      <td>0.757521</td>\n",
       "      <td>0.755602</td>\n",
       "      <td>0.755554</td>\n",
       "      <td>0.001786</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>4.889226</td>\n",
       "      <td>0.303339</td>\n",
       "      <td>0.479145</td>\n",
       "      <td>0.047034</td>\n",
       "      <td>0.05</td>\n",
       "      <td>250</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.755818</td>\n",
       "      <td>0.752245</td>\n",
       "      <td>0.756581</td>\n",
       "      <td>0.757521</td>\n",
       "      <td>0.755602</td>\n",
       "      <td>0.755554</td>\n",
       "      <td>0.001786</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>4.813100</td>\n",
       "      <td>0.178809</td>\n",
       "      <td>0.481052</td>\n",
       "      <td>0.055865</td>\n",
       "      <td>0.05</td>\n",
       "      <td>275</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.755818</td>\n",
       "      <td>0.752245</td>\n",
       "      <td>0.756581</td>\n",
       "      <td>0.757521</td>\n",
       "      <td>0.755602</td>\n",
       "      <td>0.755554</td>\n",
       "      <td>0.001786</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>4.932214</td>\n",
       "      <td>0.246114</td>\n",
       "      <td>0.501327</td>\n",
       "      <td>0.068610</td>\n",
       "      <td>0.05</td>\n",
       "      <td>300</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.755818</td>\n",
       "      <td>0.752245</td>\n",
       "      <td>0.756581</td>\n",
       "      <td>0.757521</td>\n",
       "      <td>0.755602</td>\n",
       "      <td>0.755554</td>\n",
       "      <td>0.001786</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>4.476625</td>\n",
       "      <td>0.191447</td>\n",
       "      <td>0.452485</td>\n",
       "      <td>0.034667</td>\n",
       "      <td>0.1</td>\n",
       "      <td>10</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.756624</td>\n",
       "      <td>0.753281</td>\n",
       "      <td>0.757080</td>\n",
       "      <td>0.759210</td>\n",
       "      <td>0.756811</td>\n",
       "      <td>0.756601</td>\n",
       "      <td>0.001903</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>4.406136</td>\n",
       "      <td>0.137646</td>\n",
       "      <td>0.498342</td>\n",
       "      <td>0.005022</td>\n",
       "      <td>0.1</td>\n",
       "      <td>50</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.757142</td>\n",
       "      <td>0.753837</td>\n",
       "      <td>0.757809</td>\n",
       "      <td>0.758787</td>\n",
       "      <td>0.757195</td>\n",
       "      <td>0.756954</td>\n",
       "      <td>0.001667</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>4.428647</td>\n",
       "      <td>0.277231</td>\n",
       "      <td>0.462923</td>\n",
       "      <td>0.056136</td>\n",
       "      <td>0.1</td>\n",
       "      <td>100</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.757142</td>\n",
       "      <td>0.753837</td>\n",
       "      <td>0.757809</td>\n",
       "      <td>0.758787</td>\n",
       "      <td>0.757195</td>\n",
       "      <td>0.756954</td>\n",
       "      <td>0.001667</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>4.487062</td>\n",
       "      <td>0.139051</td>\n",
       "      <td>0.435471</td>\n",
       "      <td>0.040988</td>\n",
       "      <td>0.1</td>\n",
       "      <td>150</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.757142</td>\n",
       "      <td>0.753837</td>\n",
       "      <td>0.757809</td>\n",
       "      <td>0.758787</td>\n",
       "      <td>0.757195</td>\n",
       "      <td>0.756954</td>\n",
       "      <td>0.001667</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>4.356127</td>\n",
       "      <td>0.215958</td>\n",
       "      <td>0.475671</td>\n",
       "      <td>0.040076</td>\n",
       "      <td>0.1</td>\n",
       "      <td>175</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.757142</td>\n",
       "      <td>0.753837</td>\n",
       "      <td>0.757809</td>\n",
       "      <td>0.758787</td>\n",
       "      <td>0.757195</td>\n",
       "      <td>0.756954</td>\n",
       "      <td>0.001667</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>4.189736</td>\n",
       "      <td>0.103694</td>\n",
       "      <td>0.486532</td>\n",
       "      <td>0.012581</td>\n",
       "      <td>0.1</td>\n",
       "      <td>200</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.757142</td>\n",
       "      <td>0.753837</td>\n",
       "      <td>0.757809</td>\n",
       "      <td>0.758787</td>\n",
       "      <td>0.757195</td>\n",
       "      <td>0.756954</td>\n",
       "      <td>0.001667</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>4.327119</td>\n",
       "      <td>0.214745</td>\n",
       "      <td>0.461178</td>\n",
       "      <td>0.029130</td>\n",
       "      <td>0.1</td>\n",
       "      <td>225</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.757142</td>\n",
       "      <td>0.753837</td>\n",
       "      <td>0.757809</td>\n",
       "      <td>0.758787</td>\n",
       "      <td>0.757195</td>\n",
       "      <td>0.756954</td>\n",
       "      <td>0.001667</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>4.476178</td>\n",
       "      <td>0.173307</td>\n",
       "      <td>0.438535</td>\n",
       "      <td>0.050507</td>\n",
       "      <td>0.1</td>\n",
       "      <td>250</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.757142</td>\n",
       "      <td>0.753837</td>\n",
       "      <td>0.757809</td>\n",
       "      <td>0.758787</td>\n",
       "      <td>0.757195</td>\n",
       "      <td>0.756954</td>\n",
       "      <td>0.001667</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>4.381680</td>\n",
       "      <td>0.146802</td>\n",
       "      <td>0.463335</td>\n",
       "      <td>0.034573</td>\n",
       "      <td>0.1</td>\n",
       "      <td>275</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.757142</td>\n",
       "      <td>0.753837</td>\n",
       "      <td>0.757809</td>\n",
       "      <td>0.758787</td>\n",
       "      <td>0.757195</td>\n",
       "      <td>0.756954</td>\n",
       "      <td>0.001667</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>4.559032</td>\n",
       "      <td>0.264998</td>\n",
       "      <td>0.473744</td>\n",
       "      <td>0.019738</td>\n",
       "      <td>0.1</td>\n",
       "      <td>300</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.757142</td>\n",
       "      <td>0.753837</td>\n",
       "      <td>0.757809</td>\n",
       "      <td>0.758787</td>\n",
       "      <td>0.757195</td>\n",
       "      <td>0.756954</td>\n",
       "      <td>0.001667</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    mean_fit_time  std_fit_time  mean_score_time  std_score_time  \\\n",
       "0        5.393009      0.576685         0.370357        0.040636   \n",
       "1        4.882898      0.401493         0.352737        0.037549   \n",
       "2        4.659380      0.112408         0.336542        0.034890   \n",
       "3        4.708688      0.174315         0.357509        0.033317   \n",
       "4        4.612076      0.105466         0.339967        0.033908   \n",
       "5        4.534542      0.161139         0.339244        0.026136   \n",
       "6        4.844571      0.235400         0.353835        0.027192   \n",
       "7        4.685402      0.161266         0.337116        0.025812   \n",
       "8        4.897485      0.157077         0.338547        0.036404   \n",
       "9        4.913765      0.279080         0.323447        0.029426   \n",
       "10       4.645632      0.046469         0.464581        0.044891   \n",
       "11       4.854978      0.273230         0.489626        0.035991   \n",
       "12       4.774570      0.134759         0.489724        0.040040   \n",
       "13       4.801131      0.167093         0.562892        0.099310   \n",
       "14       4.951797      0.263496         0.492938        0.036891   \n",
       "15       4.625626      0.147011         0.463454        0.044923   \n",
       "16       4.710643      0.108743         0.459066        0.029431   \n",
       "17       4.889226      0.303339         0.479145        0.047034   \n",
       "18       4.813100      0.178809         0.481052        0.055865   \n",
       "19       4.932214      0.246114         0.501327        0.068610   \n",
       "20       4.476625      0.191447         0.452485        0.034667   \n",
       "21       4.406136      0.137646         0.498342        0.005022   \n",
       "22       4.428647      0.277231         0.462923        0.056136   \n",
       "23       4.487062      0.139051         0.435471        0.040988   \n",
       "24       4.356127      0.215958         0.475671        0.040076   \n",
       "25       4.189736      0.103694         0.486532        0.012581   \n",
       "26       4.327119      0.214745         0.461178        0.029130   \n",
       "27       4.476178      0.173307         0.438535        0.050507   \n",
       "28       4.381680      0.146802         0.463335        0.034573   \n",
       "29       4.559032      0.264998         0.473744        0.019738   \n",
       "\n",
       "   param_lgbmclassifier__learning_rate param_lgbmclassifier__max_depth  \\\n",
       "0                                 0.01                              10   \n",
       "1                                 0.01                              50   \n",
       "2                                 0.01                             100   \n",
       "3                                 0.01                             150   \n",
       "4                                 0.01                             175   \n",
       "5                                 0.01                             200   \n",
       "6                                 0.01                             225   \n",
       "7                                 0.01                             250   \n",
       "8                                 0.01                             275   \n",
       "9                                 0.01                             300   \n",
       "10                                0.05                              10   \n",
       "11                                0.05                              50   \n",
       "12                                0.05                             100   \n",
       "13                                0.05                             150   \n",
       "14                                0.05                             175   \n",
       "15                                0.05                             200   \n",
       "16                                0.05                             225   \n",
       "17                                0.05                             250   \n",
       "18                                0.05                             275   \n",
       "19                                0.05                             300   \n",
       "20                                 0.1                              10   \n",
       "21                                 0.1                              50   \n",
       "22                                 0.1                             100   \n",
       "23                                 0.1                             150   \n",
       "24                                 0.1                             175   \n",
       "25                                 0.1                             200   \n",
       "26                                 0.1                             225   \n",
       "27                                 0.1                             250   \n",
       "28                                 0.1                             275   \n",
       "29                                 0.1                             300   \n",
       "\n",
       "   param_lgbmclassifier__objective  \\\n",
       "0                       regression   \n",
       "1                       regression   \n",
       "2                       regression   \n",
       "3                       regression   \n",
       "4                       regression   \n",
       "5                       regression   \n",
       "6                       regression   \n",
       "7                       regression   \n",
       "8                       regression   \n",
       "9                       regression   \n",
       "10                      regression   \n",
       "11                      regression   \n",
       "12                      regression   \n",
       "13                      regression   \n",
       "14                      regression   \n",
       "15                      regression   \n",
       "16                      regression   \n",
       "17                      regression   \n",
       "18                      regression   \n",
       "19                      regression   \n",
       "20                      regression   \n",
       "21                      regression   \n",
       "22                      regression   \n",
       "23                      regression   \n",
       "24                      regression   \n",
       "25                      regression   \n",
       "26                      regression   \n",
       "27                      regression   \n",
       "28                      regression   \n",
       "29                      regression   \n",
       "\n",
       "                                               params  split0_test_score  \\\n",
       "0   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.742369   \n",
       "1   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.742369   \n",
       "2   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.742369   \n",
       "3   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.742369   \n",
       "4   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.742369   \n",
       "5   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.742369   \n",
       "6   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.742369   \n",
       "7   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.742369   \n",
       "8   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.742369   \n",
       "9   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.742369   \n",
       "10  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.755991   \n",
       "11  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.755818   \n",
       "12  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.755818   \n",
       "13  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.755818   \n",
       "14  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.755818   \n",
       "15  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.755818   \n",
       "16  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.755818   \n",
       "17  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.755818   \n",
       "18  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.755818   \n",
       "19  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.755818   \n",
       "20  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.756624   \n",
       "21  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.757142   \n",
       "22  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.757142   \n",
       "23  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.757142   \n",
       "24  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.757142   \n",
       "25  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.757142   \n",
       "26  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.757142   \n",
       "27  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.757142   \n",
       "28  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.757142   \n",
       "29  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.757142   \n",
       "\n",
       "    split1_test_score  split2_test_score  split3_test_score  \\\n",
       "0            0.738277           0.743573           0.744302   \n",
       "1            0.738277           0.743573           0.744302   \n",
       "2            0.738277           0.743573           0.744302   \n",
       "3            0.738277           0.743573           0.744302   \n",
       "4            0.738277           0.743573           0.744302   \n",
       "5            0.738277           0.743573           0.744302   \n",
       "6            0.738277           0.743573           0.744302   \n",
       "7            0.738277           0.743573           0.744302   \n",
       "8            0.738277           0.743573           0.744302   \n",
       "9            0.738277           0.743573           0.744302   \n",
       "10           0.752034           0.756236           0.757483   \n",
       "11           0.752245           0.756581           0.757521   \n",
       "12           0.752245           0.756581           0.757521   \n",
       "13           0.752245           0.756581           0.757521   \n",
       "14           0.752245           0.756581           0.757521   \n",
       "15           0.752245           0.756581           0.757521   \n",
       "16           0.752245           0.756581           0.757521   \n",
       "17           0.752245           0.756581           0.757521   \n",
       "18           0.752245           0.756581           0.757521   \n",
       "19           0.752245           0.756581           0.757521   \n",
       "20           0.753281           0.757080           0.759210   \n",
       "21           0.753837           0.757809           0.758787   \n",
       "22           0.753837           0.757809           0.758787   \n",
       "23           0.753837           0.757809           0.758787   \n",
       "24           0.753837           0.757809           0.758787   \n",
       "25           0.753837           0.757809           0.758787   \n",
       "26           0.753837           0.757809           0.758787   \n",
       "27           0.753837           0.757809           0.758787   \n",
       "28           0.753837           0.757809           0.758787   \n",
       "29           0.753837           0.757809           0.758787   \n",
       "\n",
       "    split4_test_score  mean_test_score  std_test_score  rank_test_score  \n",
       "0            0.741117         0.741927        0.002122               21  \n",
       "1            0.741117         0.741927        0.002122               21  \n",
       "2            0.741117         0.741927        0.002122               21  \n",
       "3            0.741117         0.741927        0.002122               21  \n",
       "4            0.741117         0.741927        0.002122               21  \n",
       "5            0.741117         0.741927        0.002122               21  \n",
       "6            0.741117         0.741927        0.002122               21  \n",
       "7            0.741117         0.741927        0.002122               21  \n",
       "8            0.741117         0.741927        0.002122               21  \n",
       "9            0.741117         0.741927        0.002122               21  \n",
       "10           0.755948         0.755538        0.001840               20  \n",
       "11           0.755602         0.755554        0.001786               11  \n",
       "12           0.755602         0.755554        0.001786               11  \n",
       "13           0.755602         0.755554        0.001786               11  \n",
       "14           0.755602         0.755554        0.001786               11  \n",
       "15           0.755602         0.755554        0.001786               11  \n",
       "16           0.755602         0.755554        0.001786               11  \n",
       "17           0.755602         0.755554        0.001786               11  \n",
       "18           0.755602         0.755554        0.001786               11  \n",
       "19           0.755602         0.755554        0.001786               11  \n",
       "20           0.756811         0.756601        0.001903               10  \n",
       "21           0.757195         0.756954        0.001667                1  \n",
       "22           0.757195         0.756954        0.001667                1  \n",
       "23           0.757195         0.756954        0.001667                1  \n",
       "24           0.757195         0.756954        0.001667                1  \n",
       "25           0.757195         0.756954        0.001667                1  \n",
       "26           0.757195         0.756954        0.001667                1  \n",
       "27           0.757195         0.756954        0.001667                1  \n",
       "28           0.757195         0.756954        0.001667                1  \n",
       "29           0.757195         0.756954        0.001667                1  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib import pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 1800x1800 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = sns.relplot(data=result_df,\n",
    "\tkind='line',\n",
    "\tx='param_lgbmclassifier__max_depth',\n",
    "\ty='mean_test_score',\n",
    "\tcol='param_lgbmclassifier__learning_rate'\n",
    "           )\n",
    "\n",
    "#g.set_titles('evolucion de scores por cantidad de hojas usadas {param_lgbmclassifier__objective}')\n",
    "plt.figure(figsize=(25,25))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "param_grid = {\n",
    "    #'scaler':[StandardScaler(), MinMaxScaler(), Normalizer(), MaxAbsScaler()],\n",
    "    'lgbmclassifier__learning_rate': [0.01, 0.05, 0.1], \n",
    "    #'lgbmclassifier__n_estimators': [30],\n",
    "    'lgbmclassifier__num_leaves': [10, 50, 100, 150, 175, 200, 225, 250, 275, 300], \n",
    "    #'lgbmclassifier__num_iterations': [10, 15, 20], \n",
    "    #'lgbmclassifier__boosting_type': ['gbdt'], \n",
    "    #'lgbmclassifier__max_depth': [10, 50, 100, 150, 175, 200, 225, 250, 275, 300],\n",
    "    'lgbmclassifier__objective': ['regression'], \n",
    "    #'lgbmclassifier__seed': [500],\n",
    "    #'lgbmclassifier__colsample_bytree': [0.65, 0.75, 0.8], \n",
    "    #'lgbmclassifier__subsample': [0.7, 0.75], \n",
    "    #'lgbmclassifier__reg_alpha': [1, 2, 6],\n",
    "    #'lgbmclassifier__reg_lambda': [1, 2, 6]\n",
    "             }\n",
    "\n",
    "gs = GridSearchCV(pipe, param_grid, cv=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5,\n",
       "             estimator=Pipeline(steps=[('standardscaler', StandardScaler()),\n",
       "                                       ('lgbmclassifier',\n",
       "                                        LGBMClassifier(random_state=2021))]),\n",
       "             param_grid={'lgbmclassifier__learning_rate': [0.01, 0.05, 0.1],\n",
       "                         'lgbmclassifier__num_leaves': [10, 50, 100, 150, 175,\n",
       "                                                        200, 225, 250, 275,\n",
       "                                                        300],\n",
       "                         'lgbmclassifier__objective': ['regression']})"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gs.fit(train_values_subset, df_train_labels.values.ravel())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7850161741512887"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import f1_score\n",
    "\n",
    "in_sample_preds = gs.predict(train_values_subset)\n",
    "f1_score(df_train_labels, in_sample_preds, average='micro')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'lgbmclassifier__learning_rate': 0.05, 'lgbmclassifier__num_leaves': 300, 'lgbmclassifier__objective': 'regression'}\n",
      "Pipeline(steps=[('standardscaler', StandardScaler()),\n",
      "                ('lgbmclassifier',\n",
      "                 LGBMClassifier(learning_rate=0.05, num_leaves=300,\n",
      "                                objective='regression', random_state=2021))])\n"
     ]
    }
   ],
   "source": [
    "# Access the best set of parameters\n",
    "best_params = gs.best_params_\n",
    "print(best_params)\n",
    "# Stores the optimum model in best_pipe\n",
    "best_pipe = gs.best_estimator_\n",
    "print(best_pipe)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['mean_fit_time', 'std_fit_time', 'mean_score_time', 'std_score_time',\n",
      "       'param_lgbmclassifier__learning_rate',\n",
      "       'param_lgbmclassifier__num_leaves', 'param_lgbmclassifier__objective',\n",
      "       'params', 'split0_test_score', 'split1_test_score', 'split2_test_score',\n",
      "       'split3_test_score', 'split4_test_score', 'mean_test_score',\n",
      "       'std_test_score', 'rank_test_score'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "result_df = pd.DataFrame.from_dict(gs.cv_results_, orient='columns')\n",
    "print(result_df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_fit_time</th>\n",
       "      <th>std_fit_time</th>\n",
       "      <th>mean_score_time</th>\n",
       "      <th>std_score_time</th>\n",
       "      <th>param_lgbmclassifier__learning_rate</th>\n",
       "      <th>param_lgbmclassifier__num_leaves</th>\n",
       "      <th>param_lgbmclassifier__objective</th>\n",
       "      <th>params</th>\n",
       "      <th>split0_test_score</th>\n",
       "      <th>split1_test_score</th>\n",
       "      <th>split2_test_score</th>\n",
       "      <th>split3_test_score</th>\n",
       "      <th>split4_test_score</th>\n",
       "      <th>mean_test_score</th>\n",
       "      <th>std_test_score</th>\n",
       "      <th>rank_test_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.416429</td>\n",
       "      <td>0.699582</td>\n",
       "      <td>0.333020</td>\n",
       "      <td>0.109526</td>\n",
       "      <td>0.01</td>\n",
       "      <td>10</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.736287</td>\n",
       "      <td>0.732982</td>\n",
       "      <td>0.737318</td>\n",
       "      <td>0.737529</td>\n",
       "      <td>0.733269</td>\n",
       "      <td>0.735477</td>\n",
       "      <td>0.001967</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.785387</td>\n",
       "      <td>0.136541</td>\n",
       "      <td>0.470083</td>\n",
       "      <td>0.057279</td>\n",
       "      <td>0.01</td>\n",
       "      <td>50</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.744038</td>\n",
       "      <td>0.741884</td>\n",
       "      <td>0.746969</td>\n",
       "      <td>0.747583</td>\n",
       "      <td>0.744340</td>\n",
       "      <td>0.744963</td>\n",
       "      <td>0.002079</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7.126427</td>\n",
       "      <td>0.165306</td>\n",
       "      <td>0.570049</td>\n",
       "      <td>0.050663</td>\n",
       "      <td>0.01</td>\n",
       "      <td>100</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.746935</td>\n",
       "      <td>0.744186</td>\n",
       "      <td>0.750844</td>\n",
       "      <td>0.750518</td>\n",
       "      <td>0.747352</td>\n",
       "      <td>0.747967</td>\n",
       "      <td>0.002471</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8.509085</td>\n",
       "      <td>0.185861</td>\n",
       "      <td>0.618544</td>\n",
       "      <td>0.062128</td>\n",
       "      <td>0.01</td>\n",
       "      <td>150</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.748700</td>\n",
       "      <td>0.745318</td>\n",
       "      <td>0.751228</td>\n",
       "      <td>0.751228</td>\n",
       "      <td>0.748312</td>\n",
       "      <td>0.748957</td>\n",
       "      <td>0.002193</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9.101719</td>\n",
       "      <td>0.448956</td>\n",
       "      <td>0.675886</td>\n",
       "      <td>0.074435</td>\n",
       "      <td>0.01</td>\n",
       "      <td>175</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.748988</td>\n",
       "      <td>0.746431</td>\n",
       "      <td>0.751669</td>\n",
       "      <td>0.752245</td>\n",
       "      <td>0.749252</td>\n",
       "      <td>0.749717</td>\n",
       "      <td>0.002085</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>9.409874</td>\n",
       "      <td>0.217027</td>\n",
       "      <td>0.730046</td>\n",
       "      <td>0.063101</td>\n",
       "      <td>0.01</td>\n",
       "      <td>200</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.749218</td>\n",
       "      <td>0.746853</td>\n",
       "      <td>0.751765</td>\n",
       "      <td>0.752571</td>\n",
       "      <td>0.749482</td>\n",
       "      <td>0.749978</td>\n",
       "      <td>0.002025</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>9.712694</td>\n",
       "      <td>0.076609</td>\n",
       "      <td>0.764548</td>\n",
       "      <td>0.071673</td>\n",
       "      <td>0.01</td>\n",
       "      <td>225</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.750484</td>\n",
       "      <td>0.747026</td>\n",
       "      <td>0.752590</td>\n",
       "      <td>0.752724</td>\n",
       "      <td>0.749674</td>\n",
       "      <td>0.750500</td>\n",
       "      <td>0.002101</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>10.229115</td>\n",
       "      <td>0.137577</td>\n",
       "      <td>0.792487</td>\n",
       "      <td>0.043060</td>\n",
       "      <td>0.01</td>\n",
       "      <td>250</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.750350</td>\n",
       "      <td>0.747429</td>\n",
       "      <td>0.752456</td>\n",
       "      <td>0.752398</td>\n",
       "      <td>0.749827</td>\n",
       "      <td>0.750492</td>\n",
       "      <td>0.001862</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>10.789955</td>\n",
       "      <td>0.148621</td>\n",
       "      <td>0.883318</td>\n",
       "      <td>0.035110</td>\n",
       "      <td>0.01</td>\n",
       "      <td>275</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.750772</td>\n",
       "      <td>0.747429</td>\n",
       "      <td>0.752552</td>\n",
       "      <td>0.752552</td>\n",
       "      <td>0.750230</td>\n",
       "      <td>0.750707</td>\n",
       "      <td>0.001886</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>11.104770</td>\n",
       "      <td>0.100973</td>\n",
       "      <td>0.823469</td>\n",
       "      <td>0.064815</td>\n",
       "      <td>0.01</td>\n",
       "      <td>300</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.750983</td>\n",
       "      <td>0.747583</td>\n",
       "      <td>0.752667</td>\n",
       "      <td>0.752801</td>\n",
       "      <td>0.750691</td>\n",
       "      <td>0.750945</td>\n",
       "      <td>0.001886</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>3.896147</td>\n",
       "      <td>0.121867</td>\n",
       "      <td>0.358992</td>\n",
       "      <td>0.040520</td>\n",
       "      <td>0.05</td>\n",
       "      <td>10</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.751943</td>\n",
       "      <td>0.750480</td>\n",
       "      <td>0.754068</td>\n",
       "      <td>0.754010</td>\n",
       "      <td>0.753300</td>\n",
       "      <td>0.752760</td>\n",
       "      <td>0.001373</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>5.737431</td>\n",
       "      <td>0.103710</td>\n",
       "      <td>0.656547</td>\n",
       "      <td>0.056700</td>\n",
       "      <td>0.05</td>\n",
       "      <td>50</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.757065</td>\n",
       "      <td>0.753569</td>\n",
       "      <td>0.758001</td>\n",
       "      <td>0.758979</td>\n",
       "      <td>0.756984</td>\n",
       "      <td>0.756920</td>\n",
       "      <td>0.001826</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>6.911211</td>\n",
       "      <td>0.137212</td>\n",
       "      <td>0.772206</td>\n",
       "      <td>0.070277</td>\n",
       "      <td>0.05</td>\n",
       "      <td>100</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.758236</td>\n",
       "      <td>0.755046</td>\n",
       "      <td>0.759440</td>\n",
       "      <td>0.760668</td>\n",
       "      <td>0.758576</td>\n",
       "      <td>0.758393</td>\n",
       "      <td>0.001872</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>7.748182</td>\n",
       "      <td>0.064536</td>\n",
       "      <td>0.815682</td>\n",
       "      <td>0.079694</td>\n",
       "      <td>0.05</td>\n",
       "      <td>150</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.759291</td>\n",
       "      <td>0.755487</td>\n",
       "      <td>0.759651</td>\n",
       "      <td>0.760994</td>\n",
       "      <td>0.758903</td>\n",
       "      <td>0.758865</td>\n",
       "      <td>0.001830</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>8.938579</td>\n",
       "      <td>1.319458</td>\n",
       "      <td>0.853285</td>\n",
       "      <td>0.032103</td>\n",
       "      <td>0.05</td>\n",
       "      <td>175</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.759003</td>\n",
       "      <td>0.756101</td>\n",
       "      <td>0.760035</td>\n",
       "      <td>0.760879</td>\n",
       "      <td>0.759344</td>\n",
       "      <td>0.759072</td>\n",
       "      <td>0.001618</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>8.699681</td>\n",
       "      <td>0.136090</td>\n",
       "      <td>0.883560</td>\n",
       "      <td>0.049675</td>\n",
       "      <td>0.05</td>\n",
       "      <td>200</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.759118</td>\n",
       "      <td>0.755718</td>\n",
       "      <td>0.759632</td>\n",
       "      <td>0.760572</td>\n",
       "      <td>0.759210</td>\n",
       "      <td>0.758850</td>\n",
       "      <td>0.001649</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>9.481194</td>\n",
       "      <td>0.543445</td>\n",
       "      <td>0.912733</td>\n",
       "      <td>0.034531</td>\n",
       "      <td>0.05</td>\n",
       "      <td>225</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.759425</td>\n",
       "      <td>0.755622</td>\n",
       "      <td>0.760015</td>\n",
       "      <td>0.760553</td>\n",
       "      <td>0.759286</td>\n",
       "      <td>0.758980</td>\n",
       "      <td>0.001739</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>9.904958</td>\n",
       "      <td>0.284162</td>\n",
       "      <td>0.916467</td>\n",
       "      <td>0.073627</td>\n",
       "      <td>0.05</td>\n",
       "      <td>250</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.758926</td>\n",
       "      <td>0.755737</td>\n",
       "      <td>0.760303</td>\n",
       "      <td>0.760860</td>\n",
       "      <td>0.760035</td>\n",
       "      <td>0.759172</td>\n",
       "      <td>0.001829</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>9.858318</td>\n",
       "      <td>0.207822</td>\n",
       "      <td>1.012098</td>\n",
       "      <td>0.060929</td>\n",
       "      <td>0.05</td>\n",
       "      <td>275</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.758830</td>\n",
       "      <td>0.756274</td>\n",
       "      <td>0.760744</td>\n",
       "      <td>0.760226</td>\n",
       "      <td>0.759574</td>\n",
       "      <td>0.759130</td>\n",
       "      <td>0.001565</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>10.209336</td>\n",
       "      <td>0.088793</td>\n",
       "      <td>1.113877</td>\n",
       "      <td>0.089813</td>\n",
       "      <td>0.05</td>\n",
       "      <td>300</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.758466</td>\n",
       "      <td>0.755929</td>\n",
       "      <td>0.760514</td>\n",
       "      <td>0.761224</td>\n",
       "      <td>0.759823</td>\n",
       "      <td>0.759191</td>\n",
       "      <td>0.001868</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>3.725162</td>\n",
       "      <td>0.157439</td>\n",
       "      <td>0.425126</td>\n",
       "      <td>0.057993</td>\n",
       "      <td>0.1</td>\n",
       "      <td>10</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.754360</td>\n",
       "      <td>0.751074</td>\n",
       "      <td>0.756216</td>\n",
       "      <td>0.756370</td>\n",
       "      <td>0.756216</td>\n",
       "      <td>0.754847</td>\n",
       "      <td>0.002027</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>5.016343</td>\n",
       "      <td>0.163964</td>\n",
       "      <td>0.609975</td>\n",
       "      <td>0.042335</td>\n",
       "      <td>0.1</td>\n",
       "      <td>50</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.758140</td>\n",
       "      <td>0.754931</td>\n",
       "      <td>0.758883</td>\n",
       "      <td>0.759555</td>\n",
       "      <td>0.758001</td>\n",
       "      <td>0.757902</td>\n",
       "      <td>0.001587</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>6.019267</td>\n",
       "      <td>0.244111</td>\n",
       "      <td>0.653956</td>\n",
       "      <td>0.052700</td>\n",
       "      <td>0.1</td>\n",
       "      <td>100</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.757698</td>\n",
       "      <td>0.755890</td>\n",
       "      <td>0.759536</td>\n",
       "      <td>0.760994</td>\n",
       "      <td>0.759267</td>\n",
       "      <td>0.758677</td>\n",
       "      <td>0.001742</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>6.875219</td>\n",
       "      <td>0.170602</td>\n",
       "      <td>0.742345</td>\n",
       "      <td>0.027816</td>\n",
       "      <td>0.1</td>\n",
       "      <td>150</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.758485</td>\n",
       "      <td>0.755449</td>\n",
       "      <td>0.759574</td>\n",
       "      <td>0.760668</td>\n",
       "      <td>0.759190</td>\n",
       "      <td>0.758673</td>\n",
       "      <td>0.001760</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>7.609813</td>\n",
       "      <td>0.702174</td>\n",
       "      <td>0.736427</td>\n",
       "      <td>0.059165</td>\n",
       "      <td>0.1</td>\n",
       "      <td>175</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.757372</td>\n",
       "      <td>0.755679</td>\n",
       "      <td>0.758691</td>\n",
       "      <td>0.760092</td>\n",
       "      <td>0.759804</td>\n",
       "      <td>0.758328</td>\n",
       "      <td>0.001634</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>7.578558</td>\n",
       "      <td>0.085899</td>\n",
       "      <td>0.848109</td>\n",
       "      <td>0.102289</td>\n",
       "      <td>0.1</td>\n",
       "      <td>200</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.758696</td>\n",
       "      <td>0.755219</td>\n",
       "      <td>0.759133</td>\n",
       "      <td>0.759785</td>\n",
       "      <td>0.759421</td>\n",
       "      <td>0.758451</td>\n",
       "      <td>0.001655</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>7.998035</td>\n",
       "      <td>0.404129</td>\n",
       "      <td>0.806763</td>\n",
       "      <td>0.079395</td>\n",
       "      <td>0.1</td>\n",
       "      <td>225</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.758466</td>\n",
       "      <td>0.755008</td>\n",
       "      <td>0.759766</td>\n",
       "      <td>0.760668</td>\n",
       "      <td>0.758998</td>\n",
       "      <td>0.758581</td>\n",
       "      <td>0.001935</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>8.585935</td>\n",
       "      <td>0.270469</td>\n",
       "      <td>0.867031</td>\n",
       "      <td>0.028599</td>\n",
       "      <td>0.1</td>\n",
       "      <td>250</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.757219</td>\n",
       "      <td>0.755814</td>\n",
       "      <td>0.760092</td>\n",
       "      <td>0.759075</td>\n",
       "      <td>0.758672</td>\n",
       "      <td>0.758174</td>\n",
       "      <td>0.001498</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>8.658784</td>\n",
       "      <td>0.070904</td>\n",
       "      <td>0.917438</td>\n",
       "      <td>0.037621</td>\n",
       "      <td>0.1</td>\n",
       "      <td>275</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.758696</td>\n",
       "      <td>0.755622</td>\n",
       "      <td>0.759708</td>\n",
       "      <td>0.760303</td>\n",
       "      <td>0.759708</td>\n",
       "      <td>0.758808</td>\n",
       "      <td>0.001675</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>8.922867</td>\n",
       "      <td>0.098273</td>\n",
       "      <td>0.971115</td>\n",
       "      <td>0.037043</td>\n",
       "      <td>0.1</td>\n",
       "      <td>300</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.757890</td>\n",
       "      <td>0.754566</td>\n",
       "      <td>0.759958</td>\n",
       "      <td>0.759325</td>\n",
       "      <td>0.758864</td>\n",
       "      <td>0.758121</td>\n",
       "      <td>0.001901</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    mean_fit_time  std_fit_time  mean_score_time  std_score_time  \\\n",
       "0        4.416429      0.699582         0.333020        0.109526   \n",
       "1        5.785387      0.136541         0.470083        0.057279   \n",
       "2        7.126427      0.165306         0.570049        0.050663   \n",
       "3        8.509085      0.185861         0.618544        0.062128   \n",
       "4        9.101719      0.448956         0.675886        0.074435   \n",
       "5        9.409874      0.217027         0.730046        0.063101   \n",
       "6        9.712694      0.076609         0.764548        0.071673   \n",
       "7       10.229115      0.137577         0.792487        0.043060   \n",
       "8       10.789955      0.148621         0.883318        0.035110   \n",
       "9       11.104770      0.100973         0.823469        0.064815   \n",
       "10       3.896147      0.121867         0.358992        0.040520   \n",
       "11       5.737431      0.103710         0.656547        0.056700   \n",
       "12       6.911211      0.137212         0.772206        0.070277   \n",
       "13       7.748182      0.064536         0.815682        0.079694   \n",
       "14       8.938579      1.319458         0.853285        0.032103   \n",
       "15       8.699681      0.136090         0.883560        0.049675   \n",
       "16       9.481194      0.543445         0.912733        0.034531   \n",
       "17       9.904958      0.284162         0.916467        0.073627   \n",
       "18       9.858318      0.207822         1.012098        0.060929   \n",
       "19      10.209336      0.088793         1.113877        0.089813   \n",
       "20       3.725162      0.157439         0.425126        0.057993   \n",
       "21       5.016343      0.163964         0.609975        0.042335   \n",
       "22       6.019267      0.244111         0.653956        0.052700   \n",
       "23       6.875219      0.170602         0.742345        0.027816   \n",
       "24       7.609813      0.702174         0.736427        0.059165   \n",
       "25       7.578558      0.085899         0.848109        0.102289   \n",
       "26       7.998035      0.404129         0.806763        0.079395   \n",
       "27       8.585935      0.270469         0.867031        0.028599   \n",
       "28       8.658784      0.070904         0.917438        0.037621   \n",
       "29       8.922867      0.098273         0.971115        0.037043   \n",
       "\n",
       "   param_lgbmclassifier__learning_rate param_lgbmclassifier__num_leaves  \\\n",
       "0                                 0.01                               10   \n",
       "1                                 0.01                               50   \n",
       "2                                 0.01                              100   \n",
       "3                                 0.01                              150   \n",
       "4                                 0.01                              175   \n",
       "5                                 0.01                              200   \n",
       "6                                 0.01                              225   \n",
       "7                                 0.01                              250   \n",
       "8                                 0.01                              275   \n",
       "9                                 0.01                              300   \n",
       "10                                0.05                               10   \n",
       "11                                0.05                               50   \n",
       "12                                0.05                              100   \n",
       "13                                0.05                              150   \n",
       "14                                0.05                              175   \n",
       "15                                0.05                              200   \n",
       "16                                0.05                              225   \n",
       "17                                0.05                              250   \n",
       "18                                0.05                              275   \n",
       "19                                0.05                              300   \n",
       "20                                 0.1                               10   \n",
       "21                                 0.1                               50   \n",
       "22                                 0.1                              100   \n",
       "23                                 0.1                              150   \n",
       "24                                 0.1                              175   \n",
       "25                                 0.1                              200   \n",
       "26                                 0.1                              225   \n",
       "27                                 0.1                              250   \n",
       "28                                 0.1                              275   \n",
       "29                                 0.1                              300   \n",
       "\n",
       "   param_lgbmclassifier__objective  \\\n",
       "0                       regression   \n",
       "1                       regression   \n",
       "2                       regression   \n",
       "3                       regression   \n",
       "4                       regression   \n",
       "5                       regression   \n",
       "6                       regression   \n",
       "7                       regression   \n",
       "8                       regression   \n",
       "9                       regression   \n",
       "10                      regression   \n",
       "11                      regression   \n",
       "12                      regression   \n",
       "13                      regression   \n",
       "14                      regression   \n",
       "15                      regression   \n",
       "16                      regression   \n",
       "17                      regression   \n",
       "18                      regression   \n",
       "19                      regression   \n",
       "20                      regression   \n",
       "21                      regression   \n",
       "22                      regression   \n",
       "23                      regression   \n",
       "24                      regression   \n",
       "25                      regression   \n",
       "26                      regression   \n",
       "27                      regression   \n",
       "28                      regression   \n",
       "29                      regression   \n",
       "\n",
       "                                               params  split0_test_score  \\\n",
       "0   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.736287   \n",
       "1   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.744038   \n",
       "2   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.746935   \n",
       "3   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.748700   \n",
       "4   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.748988   \n",
       "5   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.749218   \n",
       "6   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.750484   \n",
       "7   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.750350   \n",
       "8   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.750772   \n",
       "9   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.750983   \n",
       "10  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.751943   \n",
       "11  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.757065   \n",
       "12  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.758236   \n",
       "13  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.759291   \n",
       "14  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.759003   \n",
       "15  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.759118   \n",
       "16  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.759425   \n",
       "17  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.758926   \n",
       "18  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.758830   \n",
       "19  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.758466   \n",
       "20  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.754360   \n",
       "21  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.758140   \n",
       "22  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.757698   \n",
       "23  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.758485   \n",
       "24  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.757372   \n",
       "25  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.758696   \n",
       "26  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.758466   \n",
       "27  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.757219   \n",
       "28  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.758696   \n",
       "29  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.757890   \n",
       "\n",
       "    split1_test_score  split2_test_score  split3_test_score  \\\n",
       "0            0.732982           0.737318           0.737529   \n",
       "1            0.741884           0.746969           0.747583   \n",
       "2            0.744186           0.750844           0.750518   \n",
       "3            0.745318           0.751228           0.751228   \n",
       "4            0.746431           0.751669           0.752245   \n",
       "5            0.746853           0.751765           0.752571   \n",
       "6            0.747026           0.752590           0.752724   \n",
       "7            0.747429           0.752456           0.752398   \n",
       "8            0.747429           0.752552           0.752552   \n",
       "9            0.747583           0.752667           0.752801   \n",
       "10           0.750480           0.754068           0.754010   \n",
       "11           0.753569           0.758001           0.758979   \n",
       "12           0.755046           0.759440           0.760668   \n",
       "13           0.755487           0.759651           0.760994   \n",
       "14           0.756101           0.760035           0.760879   \n",
       "15           0.755718           0.759632           0.760572   \n",
       "16           0.755622           0.760015           0.760553   \n",
       "17           0.755737           0.760303           0.760860   \n",
       "18           0.756274           0.760744           0.760226   \n",
       "19           0.755929           0.760514           0.761224   \n",
       "20           0.751074           0.756216           0.756370   \n",
       "21           0.754931           0.758883           0.759555   \n",
       "22           0.755890           0.759536           0.760994   \n",
       "23           0.755449           0.759574           0.760668   \n",
       "24           0.755679           0.758691           0.760092   \n",
       "25           0.755219           0.759133           0.759785   \n",
       "26           0.755008           0.759766           0.760668   \n",
       "27           0.755814           0.760092           0.759075   \n",
       "28           0.755622           0.759708           0.760303   \n",
       "29           0.754566           0.759958           0.759325   \n",
       "\n",
       "    split4_test_score  mean_test_score  std_test_score  rank_test_score  \n",
       "0            0.733269         0.735477        0.001967               30  \n",
       "1            0.744340         0.744963        0.002079               29  \n",
       "2            0.747352         0.747967        0.002471               28  \n",
       "3            0.748312         0.748957        0.002193               27  \n",
       "4            0.749252         0.749717        0.002085               26  \n",
       "5            0.749482         0.749978        0.002025               25  \n",
       "6            0.749674         0.750500        0.002101               23  \n",
       "7            0.749827         0.750492        0.001862               24  \n",
       "8            0.750230         0.750707        0.001886               22  \n",
       "9            0.750691         0.750945        0.001886               21  \n",
       "10           0.753300         0.752760        0.001373               20  \n",
       "11           0.756984         0.756920        0.001826               18  \n",
       "12           0.758576         0.758393        0.001872               13  \n",
       "13           0.758903         0.758865        0.001830                6  \n",
       "14           0.759344         0.759072        0.001618                4  \n",
       "15           0.759210         0.758850        0.001649                7  \n",
       "16           0.759286         0.758980        0.001739                5  \n",
       "17           0.760035         0.759172        0.001829                2  \n",
       "18           0.759574         0.759130        0.001565                3  \n",
       "19           0.759823         0.759191        0.001868                1  \n",
       "20           0.756216         0.754847        0.002027               19  \n",
       "21           0.758001         0.757902        0.001587               17  \n",
       "22           0.759267         0.758677        0.001742                9  \n",
       "23           0.759190         0.758673        0.001760               10  \n",
       "24           0.759804         0.758328        0.001634               14  \n",
       "25           0.759421         0.758451        0.001655               12  \n",
       "26           0.758998         0.758581        0.001935               11  \n",
       "27           0.758672         0.758174        0.001498               15  \n",
       "28           0.759708         0.758808        0.001675                8  \n",
       "29           0.758864         0.758121        0.001901               16  "
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib import pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 1800x1800 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = sns.relplot(data=result_df,\n",
    "\tkind='line',\n",
    "\tx='param_lgbmclassifier__num_leaves',\n",
    "\ty='mean_test_score',\n",
    "\tcol='param_lgbmclassifier__learning_rate'\n",
    "           )\n",
    "\n",
    "#g.set_titles('evolucion de scores por cantidad de hojas usadas {param_lgbmclassifier__objective}')\n",
    "plt.figure(figsize=(25,25))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "param_grid = {\n",
    "    #'scaler':[StandardScaler(), MinMaxScaler(), Normalizer(), MaxAbsScaler()],\n",
    "    'lgbmclassifier__learning_rate': [0.01, 0.05, 0.1], \n",
    "    #'lgbmclassifier__n_estimators': [30],\n",
    "    #'lgbmclassifier__num_leaves': [10, 50, 100, 150, 175 200, 225, 250, 275, 300], \n",
    "    'lgbmclassifier__num_iterations': [10, 50, 100, 150, 175, 200, 225, 250, 275, 300], \n",
    "    #'lgbmclassifier__boosting_type': ['gbdt'], \n",
    "    #'lgbmclassifier__max_depth': [10, 50, 100, 150, 175, 200, 225, 250, 275, 300],\n",
    "    'lgbmclassifier__objective': ['regression'], \n",
    "    #'lgbmclassifier__seed': [500],\n",
    "    #'lgbmclassifier__colsample_bytree': [0.65, 0.75, 0.8], \n",
    "    #'lgbmclassifier__subsample': [0.7, 0.75], \n",
    "    #'lgbmclassifier__reg_alpha': [1, 2, 6],\n",
    "    #'lgbmclassifier__reg_lambda': [1, 2, 6]\n",
    "             }\n",
    "\n",
    "gs = GridSearchCV(pipe, param_grid, cv=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5,\n",
       "             estimator=Pipeline(steps=[('standardscaler', StandardScaler()),\n",
       "                                       ('lgbmclassifier',\n",
       "                                        LGBMClassifier(random_state=2021))]),\n",
       "             param_grid={'lgbmclassifier__learning_rate': [0.01, 0.05, 0.1],\n",
       "                         'lgbmclassifier__num_iterations': [10, 50, 100, 150,\n",
       "                                                            175, 200, 225, 250,\n",
       "                                                            275, 300],\n",
       "                         'lgbmclassifier__objective': ['regression']})"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gs.fit(train_values_subset, df_train_labels.values.ravel())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7724874424887088"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import f1_score\n",
    "\n",
    "in_sample_preds = gs.predict(train_values_subset)\n",
    "f1_score(df_train_labels, in_sample_preds, average='micro')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'lgbmclassifier__learning_rate': 0.1, 'lgbmclassifier__num_iterations': 300, 'lgbmclassifier__objective': 'regression'}\n",
      "Pipeline(steps=[('standardscaler', StandardScaler()),\n",
      "                ('lgbmclassifier',\n",
      "                 LGBMClassifier(num_iterations=300, objective='regression',\n",
      "                                random_state=2021))])\n"
     ]
    }
   ],
   "source": [
    "# Access the best set of parameters\n",
    "best_params = gs.best_params_\n",
    "print(best_params)\n",
    "# Stores the optimum model in best_pipe\n",
    "best_pipe = gs.best_estimator_\n",
    "print(best_pipe)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['mean_fit_time', 'std_fit_time', 'mean_score_time', 'std_score_time',\n",
      "       'param_lgbmclassifier__learning_rate',\n",
      "       'param_lgbmclassifier__num_iterations',\n",
      "       'param_lgbmclassifier__objective', 'params', 'split0_test_score',\n",
      "       'split1_test_score', 'split2_test_score', 'split3_test_score',\n",
      "       'split4_test_score', 'mean_test_score', 'std_test_score',\n",
      "       'rank_test_score'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "result_df = pd.DataFrame.from_dict(gs.cv_results_, orient='columns')\n",
    "print(result_df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_fit_time</th>\n",
       "      <th>std_fit_time</th>\n",
       "      <th>mean_score_time</th>\n",
       "      <th>std_score_time</th>\n",
       "      <th>param_lgbmclassifier__learning_rate</th>\n",
       "      <th>param_lgbmclassifier__num_iterations</th>\n",
       "      <th>param_lgbmclassifier__objective</th>\n",
       "      <th>params</th>\n",
       "      <th>split0_test_score</th>\n",
       "      <th>split1_test_score</th>\n",
       "      <th>split2_test_score</th>\n",
       "      <th>split3_test_score</th>\n",
       "      <th>split4_test_score</th>\n",
       "      <th>mean_test_score</th>\n",
       "      <th>std_test_score</th>\n",
       "      <th>rank_test_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.969260</td>\n",
       "      <td>0.127251</td>\n",
       "      <td>0.063157</td>\n",
       "      <td>0.026841</td>\n",
       "      <td>0.01</td>\n",
       "      <td>10</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.568907</td>\n",
       "      <td>0.568918</td>\n",
       "      <td>0.568899</td>\n",
       "      <td>0.568918</td>\n",
       "      <td>0.568918</td>\n",
       "      <td>0.568912</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.409138</td>\n",
       "      <td>0.546992</td>\n",
       "      <td>0.205850</td>\n",
       "      <td>0.026445</td>\n",
       "      <td>0.01</td>\n",
       "      <td>50</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.709330</td>\n",
       "      <td>0.707176</td>\n",
       "      <td>0.711071</td>\n",
       "      <td>0.708423</td>\n",
       "      <td>0.708998</td>\n",
       "      <td>0.709000</td>\n",
       "      <td>0.001269</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.297767</td>\n",
       "      <td>0.336551</td>\n",
       "      <td>0.413836</td>\n",
       "      <td>0.054851</td>\n",
       "      <td>0.01</td>\n",
       "      <td>100</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.742369</td>\n",
       "      <td>0.738277</td>\n",
       "      <td>0.743573</td>\n",
       "      <td>0.744302</td>\n",
       "      <td>0.741117</td>\n",
       "      <td>0.741927</td>\n",
       "      <td>0.002122</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7.439521</td>\n",
       "      <td>0.126924</td>\n",
       "      <td>0.523051</td>\n",
       "      <td>0.007067</td>\n",
       "      <td>0.01</td>\n",
       "      <td>150</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.750465</td>\n",
       "      <td>0.747506</td>\n",
       "      <td>0.751362</td>\n",
       "      <td>0.752552</td>\n",
       "      <td>0.749309</td>\n",
       "      <td>0.750239</td>\n",
       "      <td>0.001732</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8.393989</td>\n",
       "      <td>0.091693</td>\n",
       "      <td>0.700635</td>\n",
       "      <td>0.061888</td>\n",
       "      <td>0.01</td>\n",
       "      <td>175</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.751923</td>\n",
       "      <td>0.749290</td>\n",
       "      <td>0.753166</td>\n",
       "      <td>0.753070</td>\n",
       "      <td>0.751132</td>\n",
       "      <td>0.751716</td>\n",
       "      <td>0.001429</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>10.092843</td>\n",
       "      <td>0.586403</td>\n",
       "      <td>0.855928</td>\n",
       "      <td>0.132212</td>\n",
       "      <td>0.01</td>\n",
       "      <td>200</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.752883</td>\n",
       "      <td>0.749444</td>\n",
       "      <td>0.753933</td>\n",
       "      <td>0.754355</td>\n",
       "      <td>0.752226</td>\n",
       "      <td>0.752568</td>\n",
       "      <td>0.001734</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>10.786487</td>\n",
       "      <td>0.157257</td>\n",
       "      <td>0.966808</td>\n",
       "      <td>0.036856</td>\n",
       "      <td>0.01</td>\n",
       "      <td>225</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.753976</td>\n",
       "      <td>0.750691</td>\n",
       "      <td>0.754547</td>\n",
       "      <td>0.754375</td>\n",
       "      <td>0.752609</td>\n",
       "      <td>0.753240</td>\n",
       "      <td>0.001445</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>11.987073</td>\n",
       "      <td>0.164216</td>\n",
       "      <td>1.108843</td>\n",
       "      <td>0.072989</td>\n",
       "      <td>0.01</td>\n",
       "      <td>250</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.754149</td>\n",
       "      <td>0.750345</td>\n",
       "      <td>0.755084</td>\n",
       "      <td>0.754893</td>\n",
       "      <td>0.752763</td>\n",
       "      <td>0.753447</td>\n",
       "      <td>0.001752</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>13.641147</td>\n",
       "      <td>0.628129</td>\n",
       "      <td>1.287547</td>\n",
       "      <td>0.078151</td>\n",
       "      <td>0.01</td>\n",
       "      <td>275</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.754590</td>\n",
       "      <td>0.750307</td>\n",
       "      <td>0.755276</td>\n",
       "      <td>0.755257</td>\n",
       "      <td>0.753051</td>\n",
       "      <td>0.753696</td>\n",
       "      <td>0.001878</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>14.484905</td>\n",
       "      <td>0.075275</td>\n",
       "      <td>1.371046</td>\n",
       "      <td>0.045187</td>\n",
       "      <td>0.01</td>\n",
       "      <td>300</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.01, 'lgbmc...</td>\n",
       "      <td>0.754936</td>\n",
       "      <td>0.750787</td>\n",
       "      <td>0.755372</td>\n",
       "      <td>0.755430</td>\n",
       "      <td>0.753703</td>\n",
       "      <td>0.754045</td>\n",
       "      <td>0.001744</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.983512</td>\n",
       "      <td>0.022066</td>\n",
       "      <td>0.052583</td>\n",
       "      <td>0.004180</td>\n",
       "      <td>0.05</td>\n",
       "      <td>10</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.716256</td>\n",
       "      <td>0.710994</td>\n",
       "      <td>0.714198</td>\n",
       "      <td>0.715790</td>\n",
       "      <td>0.712932</td>\n",
       "      <td>0.714034</td>\n",
       "      <td>0.001924</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2.836934</td>\n",
       "      <td>0.162356</td>\n",
       "      <td>0.227888</td>\n",
       "      <td>0.022837</td>\n",
       "      <td>0.05</td>\n",
       "      <td>50</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.754341</td>\n",
       "      <td>0.750672</td>\n",
       "      <td>0.755027</td>\n",
       "      <td>0.754470</td>\n",
       "      <td>0.753031</td>\n",
       "      <td>0.753508</td>\n",
       "      <td>0.001562</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>5.148136</td>\n",
       "      <td>0.118031</td>\n",
       "      <td>0.552986</td>\n",
       "      <td>0.035161</td>\n",
       "      <td>0.05</td>\n",
       "      <td>100</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.755818</td>\n",
       "      <td>0.752245</td>\n",
       "      <td>0.756581</td>\n",
       "      <td>0.757521</td>\n",
       "      <td>0.755602</td>\n",
       "      <td>0.755554</td>\n",
       "      <td>0.001786</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>7.090431</td>\n",
       "      <td>0.262853</td>\n",
       "      <td>0.784862</td>\n",
       "      <td>0.083598</td>\n",
       "      <td>0.05</td>\n",
       "      <td>150</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.757200</td>\n",
       "      <td>0.752437</td>\n",
       "      <td>0.757329</td>\n",
       "      <td>0.758365</td>\n",
       "      <td>0.756715</td>\n",
       "      <td>0.756409</td>\n",
       "      <td>0.002058</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>7.762981</td>\n",
       "      <td>0.247005</td>\n",
       "      <td>0.886582</td>\n",
       "      <td>0.068020</td>\n",
       "      <td>0.05</td>\n",
       "      <td>175</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.757334</td>\n",
       "      <td>0.753089</td>\n",
       "      <td>0.757368</td>\n",
       "      <td>0.758634</td>\n",
       "      <td>0.756734</td>\n",
       "      <td>0.756632</td>\n",
       "      <td>0.001876</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>8.550567</td>\n",
       "      <td>0.120091</td>\n",
       "      <td>0.966880</td>\n",
       "      <td>0.056458</td>\n",
       "      <td>0.05</td>\n",
       "      <td>200</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.757372</td>\n",
       "      <td>0.753338</td>\n",
       "      <td>0.757272</td>\n",
       "      <td>0.758634</td>\n",
       "      <td>0.756946</td>\n",
       "      <td>0.756712</td>\n",
       "      <td>0.001782</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>9.156319</td>\n",
       "      <td>0.152091</td>\n",
       "      <td>1.030283</td>\n",
       "      <td>0.050237</td>\n",
       "      <td>0.05</td>\n",
       "      <td>225</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.757257</td>\n",
       "      <td>0.753358</td>\n",
       "      <td>0.757157</td>\n",
       "      <td>0.758807</td>\n",
       "      <td>0.756888</td>\n",
       "      <td>0.756693</td>\n",
       "      <td>0.001798</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>9.913667</td>\n",
       "      <td>0.141515</td>\n",
       "      <td>1.220794</td>\n",
       "      <td>0.111125</td>\n",
       "      <td>0.05</td>\n",
       "      <td>250</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.757756</td>\n",
       "      <td>0.753185</td>\n",
       "      <td>0.757310</td>\n",
       "      <td>0.759037</td>\n",
       "      <td>0.757195</td>\n",
       "      <td>0.756897</td>\n",
       "      <td>0.001968</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>10.932935</td>\n",
       "      <td>0.446444</td>\n",
       "      <td>1.241428</td>\n",
       "      <td>0.051919</td>\n",
       "      <td>0.05</td>\n",
       "      <td>275</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.757641</td>\n",
       "      <td>0.752916</td>\n",
       "      <td>0.757291</td>\n",
       "      <td>0.759305</td>\n",
       "      <td>0.757291</td>\n",
       "      <td>0.756889</td>\n",
       "      <td>0.002122</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>11.209135</td>\n",
       "      <td>0.126825</td>\n",
       "      <td>1.301203</td>\n",
       "      <td>0.048887</td>\n",
       "      <td>0.05</td>\n",
       "      <td>300</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.05, 'lgbmc...</td>\n",
       "      <td>0.758178</td>\n",
       "      <td>0.753281</td>\n",
       "      <td>0.757329</td>\n",
       "      <td>0.759325</td>\n",
       "      <td>0.757195</td>\n",
       "      <td>0.757062</td>\n",
       "      <td>0.002037</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>0.978314</td>\n",
       "      <td>0.030949</td>\n",
       "      <td>0.082077</td>\n",
       "      <td>0.018076</td>\n",
       "      <td>0.1</td>\n",
       "      <td>10</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.744115</td>\n",
       "      <td>0.740138</td>\n",
       "      <td>0.745510</td>\n",
       "      <td>0.747659</td>\n",
       "      <td>0.742882</td>\n",
       "      <td>0.744061</td>\n",
       "      <td>0.002523</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>2.825118</td>\n",
       "      <td>0.160043</td>\n",
       "      <td>0.280891</td>\n",
       "      <td>0.032836</td>\n",
       "      <td>0.1</td>\n",
       "      <td>50</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.756164</td>\n",
       "      <td>0.752398</td>\n",
       "      <td>0.756696</td>\n",
       "      <td>0.757464</td>\n",
       "      <td>0.756389</td>\n",
       "      <td>0.755822</td>\n",
       "      <td>0.001767</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>4.566481</td>\n",
       "      <td>0.103439</td>\n",
       "      <td>0.510986</td>\n",
       "      <td>0.030961</td>\n",
       "      <td>0.1</td>\n",
       "      <td>100</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.757142</td>\n",
       "      <td>0.753837</td>\n",
       "      <td>0.757809</td>\n",
       "      <td>0.758787</td>\n",
       "      <td>0.757195</td>\n",
       "      <td>0.756954</td>\n",
       "      <td>0.001667</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>6.216791</td>\n",
       "      <td>0.417372</td>\n",
       "      <td>0.677636</td>\n",
       "      <td>0.058395</td>\n",
       "      <td>0.1</td>\n",
       "      <td>150</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.757679</td>\n",
       "      <td>0.753492</td>\n",
       "      <td>0.758001</td>\n",
       "      <td>0.759517</td>\n",
       "      <td>0.758058</td>\n",
       "      <td>0.757349</td>\n",
       "      <td>0.002030</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>6.627093</td>\n",
       "      <td>0.116411</td>\n",
       "      <td>0.703089</td>\n",
       "      <td>0.057663</td>\n",
       "      <td>0.1</td>\n",
       "      <td>175</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.757890</td>\n",
       "      <td>0.753799</td>\n",
       "      <td>0.758078</td>\n",
       "      <td>0.759612</td>\n",
       "      <td>0.758116</td>\n",
       "      <td>0.757499</td>\n",
       "      <td>0.001951</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>7.164750</td>\n",
       "      <td>0.379282</td>\n",
       "      <td>0.763996</td>\n",
       "      <td>0.046773</td>\n",
       "      <td>0.1</td>\n",
       "      <td>200</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.757737</td>\n",
       "      <td>0.754528</td>\n",
       "      <td>0.758308</td>\n",
       "      <td>0.759574</td>\n",
       "      <td>0.758519</td>\n",
       "      <td>0.757733</td>\n",
       "      <td>0.001709</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>8.046921</td>\n",
       "      <td>0.128760</td>\n",
       "      <td>0.883462</td>\n",
       "      <td>0.058987</td>\n",
       "      <td>0.1</td>\n",
       "      <td>225</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.757890</td>\n",
       "      <td>0.754624</td>\n",
       "      <td>0.758212</td>\n",
       "      <td>0.759632</td>\n",
       "      <td>0.758672</td>\n",
       "      <td>0.757806</td>\n",
       "      <td>0.001696</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>8.746318</td>\n",
       "      <td>0.749881</td>\n",
       "      <td>0.941375</td>\n",
       "      <td>0.022442</td>\n",
       "      <td>0.1</td>\n",
       "      <td>250</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.758025</td>\n",
       "      <td>0.755046</td>\n",
       "      <td>0.758519</td>\n",
       "      <td>0.759785</td>\n",
       "      <td>0.758020</td>\n",
       "      <td>0.757879</td>\n",
       "      <td>0.001556</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>9.335144</td>\n",
       "      <td>0.078141</td>\n",
       "      <td>1.047975</td>\n",
       "      <td>0.082524</td>\n",
       "      <td>0.1</td>\n",
       "      <td>275</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.757967</td>\n",
       "      <td>0.755104</td>\n",
       "      <td>0.758903</td>\n",
       "      <td>0.759958</td>\n",
       "      <td>0.758500</td>\n",
       "      <td>0.758086</td>\n",
       "      <td>0.001628</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>9.987100</td>\n",
       "      <td>0.112481</td>\n",
       "      <td>1.142911</td>\n",
       "      <td>0.069708</td>\n",
       "      <td>0.1</td>\n",
       "      <td>300</td>\n",
       "      <td>regression</td>\n",
       "      <td>{'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...</td>\n",
       "      <td>0.758121</td>\n",
       "      <td>0.755065</td>\n",
       "      <td>0.758461</td>\n",
       "      <td>0.760553</td>\n",
       "      <td>0.758864</td>\n",
       "      <td>0.758213</td>\n",
       "      <td>0.001782</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    mean_fit_time  std_fit_time  mean_score_time  std_score_time  \\\n",
       "0        0.969260      0.127251         0.063157        0.026841   \n",
       "1        3.409138      0.546992         0.205850        0.026445   \n",
       "2        5.297767      0.336551         0.413836        0.054851   \n",
       "3        7.439521      0.126924         0.523051        0.007067   \n",
       "4        8.393989      0.091693         0.700635        0.061888   \n",
       "5       10.092843      0.586403         0.855928        0.132212   \n",
       "6       10.786487      0.157257         0.966808        0.036856   \n",
       "7       11.987073      0.164216         1.108843        0.072989   \n",
       "8       13.641147      0.628129         1.287547        0.078151   \n",
       "9       14.484905      0.075275         1.371046        0.045187   \n",
       "10       0.983512      0.022066         0.052583        0.004180   \n",
       "11       2.836934      0.162356         0.227888        0.022837   \n",
       "12       5.148136      0.118031         0.552986        0.035161   \n",
       "13       7.090431      0.262853         0.784862        0.083598   \n",
       "14       7.762981      0.247005         0.886582        0.068020   \n",
       "15       8.550567      0.120091         0.966880        0.056458   \n",
       "16       9.156319      0.152091         1.030283        0.050237   \n",
       "17       9.913667      0.141515         1.220794        0.111125   \n",
       "18      10.932935      0.446444         1.241428        0.051919   \n",
       "19      11.209135      0.126825         1.301203        0.048887   \n",
       "20       0.978314      0.030949         0.082077        0.018076   \n",
       "21       2.825118      0.160043         0.280891        0.032836   \n",
       "22       4.566481      0.103439         0.510986        0.030961   \n",
       "23       6.216791      0.417372         0.677636        0.058395   \n",
       "24       6.627093      0.116411         0.703089        0.057663   \n",
       "25       7.164750      0.379282         0.763996        0.046773   \n",
       "26       8.046921      0.128760         0.883462        0.058987   \n",
       "27       8.746318      0.749881         0.941375        0.022442   \n",
       "28       9.335144      0.078141         1.047975        0.082524   \n",
       "29       9.987100      0.112481         1.142911        0.069708   \n",
       "\n",
       "   param_lgbmclassifier__learning_rate param_lgbmclassifier__num_iterations  \\\n",
       "0                                 0.01                                   10   \n",
       "1                                 0.01                                   50   \n",
       "2                                 0.01                                  100   \n",
       "3                                 0.01                                  150   \n",
       "4                                 0.01                                  175   \n",
       "5                                 0.01                                  200   \n",
       "6                                 0.01                                  225   \n",
       "7                                 0.01                                  250   \n",
       "8                                 0.01                                  275   \n",
       "9                                 0.01                                  300   \n",
       "10                                0.05                                   10   \n",
       "11                                0.05                                   50   \n",
       "12                                0.05                                  100   \n",
       "13                                0.05                                  150   \n",
       "14                                0.05                                  175   \n",
       "15                                0.05                                  200   \n",
       "16                                0.05                                  225   \n",
       "17                                0.05                                  250   \n",
       "18                                0.05                                  275   \n",
       "19                                0.05                                  300   \n",
       "20                                 0.1                                   10   \n",
       "21                                 0.1                                   50   \n",
       "22                                 0.1                                  100   \n",
       "23                                 0.1                                  150   \n",
       "24                                 0.1                                  175   \n",
       "25                                 0.1                                  200   \n",
       "26                                 0.1                                  225   \n",
       "27                                 0.1                                  250   \n",
       "28                                 0.1                                  275   \n",
       "29                                 0.1                                  300   \n",
       "\n",
       "   param_lgbmclassifier__objective  \\\n",
       "0                       regression   \n",
       "1                       regression   \n",
       "2                       regression   \n",
       "3                       regression   \n",
       "4                       regression   \n",
       "5                       regression   \n",
       "6                       regression   \n",
       "7                       regression   \n",
       "8                       regression   \n",
       "9                       regression   \n",
       "10                      regression   \n",
       "11                      regression   \n",
       "12                      regression   \n",
       "13                      regression   \n",
       "14                      regression   \n",
       "15                      regression   \n",
       "16                      regression   \n",
       "17                      regression   \n",
       "18                      regression   \n",
       "19                      regression   \n",
       "20                      regression   \n",
       "21                      regression   \n",
       "22                      regression   \n",
       "23                      regression   \n",
       "24                      regression   \n",
       "25                      regression   \n",
       "26                      regression   \n",
       "27                      regression   \n",
       "28                      regression   \n",
       "29                      regression   \n",
       "\n",
       "                                               params  split0_test_score  \\\n",
       "0   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.568907   \n",
       "1   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.709330   \n",
       "2   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.742369   \n",
       "3   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.750465   \n",
       "4   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.751923   \n",
       "5   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.752883   \n",
       "6   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.753976   \n",
       "7   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.754149   \n",
       "8   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.754590   \n",
       "9   {'lgbmclassifier__learning_rate': 0.01, 'lgbmc...           0.754936   \n",
       "10  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.716256   \n",
       "11  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.754341   \n",
       "12  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.755818   \n",
       "13  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.757200   \n",
       "14  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.757334   \n",
       "15  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.757372   \n",
       "16  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.757257   \n",
       "17  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.757756   \n",
       "18  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.757641   \n",
       "19  {'lgbmclassifier__learning_rate': 0.05, 'lgbmc...           0.758178   \n",
       "20  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.744115   \n",
       "21  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.756164   \n",
       "22  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.757142   \n",
       "23  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.757679   \n",
       "24  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.757890   \n",
       "25  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.757737   \n",
       "26  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.757890   \n",
       "27  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.758025   \n",
       "28  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.757967   \n",
       "29  {'lgbmclassifier__learning_rate': 0.1, 'lgbmcl...           0.758121   \n",
       "\n",
       "    split1_test_score  split2_test_score  split3_test_score  \\\n",
       "0            0.568918           0.568899           0.568918   \n",
       "1            0.707176           0.711071           0.708423   \n",
       "2            0.738277           0.743573           0.744302   \n",
       "3            0.747506           0.751362           0.752552   \n",
       "4            0.749290           0.753166           0.753070   \n",
       "5            0.749444           0.753933           0.754355   \n",
       "6            0.750691           0.754547           0.754375   \n",
       "7            0.750345           0.755084           0.754893   \n",
       "8            0.750307           0.755276           0.755257   \n",
       "9            0.750787           0.755372           0.755430   \n",
       "10           0.710994           0.714198           0.715790   \n",
       "11           0.750672           0.755027           0.754470   \n",
       "12           0.752245           0.756581           0.757521   \n",
       "13           0.752437           0.757329           0.758365   \n",
       "14           0.753089           0.757368           0.758634   \n",
       "15           0.753338           0.757272           0.758634   \n",
       "16           0.753358           0.757157           0.758807   \n",
       "17           0.753185           0.757310           0.759037   \n",
       "18           0.752916           0.757291           0.759305   \n",
       "19           0.753281           0.757329           0.759325   \n",
       "20           0.740138           0.745510           0.747659   \n",
       "21           0.752398           0.756696           0.757464   \n",
       "22           0.753837           0.757809           0.758787   \n",
       "23           0.753492           0.758001           0.759517   \n",
       "24           0.753799           0.758078           0.759612   \n",
       "25           0.754528           0.758308           0.759574   \n",
       "26           0.754624           0.758212           0.759632   \n",
       "27           0.755046           0.758519           0.759785   \n",
       "28           0.755104           0.758903           0.759958   \n",
       "29           0.755065           0.758461           0.760553   \n",
       "\n",
       "    split4_test_score  mean_test_score  std_test_score  rank_test_score  \n",
       "0            0.568918         0.568912        0.000008               30  \n",
       "1            0.708998         0.709000        0.001269               29  \n",
       "2            0.741117         0.741927        0.002122               27  \n",
       "3            0.749309         0.750239        0.001732               25  \n",
       "4            0.751132         0.751716        0.001429               24  \n",
       "5            0.752226         0.752568        0.001734               23  \n",
       "6            0.752609         0.753240        0.001445               22  \n",
       "7            0.752763         0.753447        0.001752               21  \n",
       "8            0.753051         0.753696        0.001878               19  \n",
       "9            0.753703         0.754045        0.001744               18  \n",
       "10           0.712932         0.714034        0.001924               28  \n",
       "11           0.753031         0.753508        0.001562               20  \n",
       "12           0.755602         0.755554        0.001786               17  \n",
       "13           0.756715         0.756409        0.002058               15  \n",
       "14           0.756734         0.756632        0.001876               14  \n",
       "15           0.756946         0.756712        0.001782               12  \n",
       "16           0.756888         0.756693        0.001798               13  \n",
       "17           0.757195         0.756897        0.001968               10  \n",
       "18           0.757291         0.756889        0.002122               11  \n",
       "19           0.757195         0.757062        0.002037                8  \n",
       "20           0.742882         0.744061        0.002523               26  \n",
       "21           0.756389         0.755822        0.001767               16  \n",
       "22           0.757195         0.756954        0.001667                9  \n",
       "23           0.758058         0.757349        0.002030                7  \n",
       "24           0.758116         0.757499        0.001951                6  \n",
       "25           0.758519         0.757733        0.001709                5  \n",
       "26           0.758672         0.757806        0.001696                4  \n",
       "27           0.758020         0.757879        0.001556                3  \n",
       "28           0.758500         0.758086        0.001628                2  \n",
       "29           0.758864         0.758213        0.001782                1  "
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib import pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 1800x1800 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = sns.relplot(data=result_df,\n",
    "\tkind='line',\n",
    "\tx='param_lgbmclassifier__num_iterations',\n",
    "\ty='mean_test_score',\n",
    "\tcol='param_lgbmclassifier__learning_rate'\n",
    "           )\n",
    "\n",
    "#g.set_titles('evolucion de scores por cantidad de hojas usadas {param_lgbmclassifier__objective}')\n",
    "plt.figure(figsize=(25,25))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
